/* Generated by Yosys 0.6+ (git sha1 UNKNOWN, gcc 4.8.4-2ubuntu1~14.04.3 -fPIC -Os) */

module BUF(A, Y);
  input A;
  output Y;
  assign Y = A;
endmodule

(* top =  1  *)
(* src = "DAT.v:18" *)
module DAT(writeRead, newService, multiblock, timeoutenable, reset, blockSize, fifo_full, timeout, SDclock, clock, fromFifo_toPS, fromSD_SP, complete, toSD_PS, padState, padEnable, timeOutFail, fromSP_toFifo, pop, push, IDLE_out);
  (* src = "DAT.v:42" *)
  wire IDLE_fisicaControl;
  (* src = "DAT.v:39" *)
  output IDLE_out;
  (* src = "DAT.v:27" *)
  input SDclock;
  (* src = "DAT.v:24" *)
  input [3:0] blockSize;
  (* src = "DAT.v:28" *)
  input clock;
  (* src = "DAT.v:31" *)
  output complete;
  (* src = "DAT.v:25" *)
  input fifo_full;
  (* src = "DAT.v:29" *)
  input [31:0] fromFifo_toPS;
  (* src = "DAT.v:30" *)
  input fromSD_SP;
  (* src = "DAT.v:36" *)
  output [31:0] fromSP_toFifo;
  (* src = "DAT.v:21" *)
  input multiblock;
  (* src = "DAT.v:20" *)
  input newService;
  (* src = "DAT.v:45" *)
  wire newService_controlFisica;
  (* src = "DAT.v:34" *)
  output padEnable;
  (* src = "DAT.v:33" *)
  output padState;
  (* src = "DAT.v:37" *)
  output pop;
  (* src = "DAT.v:38" *)
  output push;
  (* src = "DAT.v:43" *)
  wire recibido_fisicaControl;
  (* src = "DAT.v:23" *)
  input reset;
  (* src = "DAT.v:46" *)
  wire reset_controlFisica;
  (* src = "DAT.v:35" *)
  output timeOutFail;
  (* src = "DAT.v:26" *)
  input [15:0] timeout;
  (* src = "DAT.v:48" *)
  wire [15:0] timeout_controlFisica;
  (* src = "DAT.v:22" *)
  input timeoutenable;
  (* src = "DAT.v:32" *)
  output toSD_PS;
  (* src = "DAT.v:44" *)
  wire transferComplete_fisicaControl;
  (* src = "DAT.v:19" *)
  input writeRead;
  (* src = "DAT.v:47" *)
  wire writeRead_controlFisica;
  (* src = "DAT.v:49" *)
  control_DAT core1 (
    .IDLE_in(IDLE_fisicaControl),
    .IDLE_out(IDLE_out),
    .blockSize(blockSize),
    .clock(clock),
    .complete(complete),
    .fifo_full(fifo_full),
    .multiblock(multiblock),
    .newService(newService),
    .newService_fisica(newService_controlFisica),
    .recibido(recibido_fisicaControl),
    .reset(reset),
    .reset_fisica(reset_controlFisica),
    .timeout(timeout),
    .timeout_fisica(timeout_controlFisica),
    .timeoutenable(timeoutenable),
    .transferComplete(transferComplete_fisicaControl),
    .writeRead(writeRead),
    .writeRead_fisica(writeRead_controlFisica)
  );
  (* src = "DAT.v:54" *)
  capa_fisica core2 (
    .IDLE_out_control(IDLE_fisicaControl),
    .SDclock(SDclock),
    .enable_PS(),
    .enable_SP(),
    .fromFifo_toPS(fromFifo_toPS),
    .fromSD_SP(fromSD_SP),
    .fromSP_toFifo(fromSP_toFifo),
    .loadsend(),
    .newService_control(newService_controlFisica),
    .padEnable(padEnable),
    .padState(padState),
    .pop(pop),
    .push(push),
    .reception_SD(),
    .recibido(recibido_fisicaControl),
    .reset(reset_controlFisica),
    .timeOutFail(timeOutFail),
    .timeout(timeout_controlFisica),
    .timeoutenable(timeoutenable),
    .toPS_fromFifo(),
    .toSD_PS(toSD_PS),
    .transferComplete(transferComplete_fisicaControl),
    .transmision_SD(),
    .writeRead_control(writeRead_controlFisica)
  );
endmodule

module DFF(C, Q, D);
  input C;
  input D;
  reg IQ;
  output Q;
  always @(posedge C)
      IQ <= D;
  assign Q = IQ;
endmodule

module DFFSR(S, C, Q, D, R);
  input C;
  input D;
  reg IQ;
  output Q;
  input R;
  input S;
  always @(posedge C or posedge S or posedge R)
    if (R)
      IQ <= 0;
    else if (S)
      IQ <= 1;
    else
      IQ <= D;
  assign Q = IQ;
endmodule

module NAND(A, B, Y);
  wire _0_;
  input A;
  input B;
  output Y;
  assign Y = ~_0_;
  assign _0_ = A & B;
endmodule

module NOR(A, B, Y);
  wire _0_;
  input A;
  input B;
  output Y;
  assign Y = ~_0_;
  assign _0_ = A | B;
endmodule

module NOT(A, Y);
  input A;
  output Y;
  assign Y = ~A;
endmodule

(* src = "capa_fisica.v:13" *)
module capa_fisica(writeRead_control, timeoutenable, timeout, newService_control, SDclock, reset, transmision_SD, reception_SD, fromFifo_toPS, fromSD_SP, recibido, transferComplete, pop, push, IDLE_out_control, timeOutFail, loadsend, enable_PS, enable_SP, padState, padEnable, fromSP_toFifo, toPS_fromFifo, toSD_PS);
  (* src = "capa_fisica.v:88" *)
  wire _0000_;
  (* src = "capa_fisica.v:88" *)
  wire _0001_;
  (* src = "capa_fisica.v:88" *)
  wire _0002_;
  (* src = "capa_fisica.v:88" *)
  wire _0003_;
  (* src = "capa_fisica.v:88" *)
  wire [7:0] _0004_;
  (* src = "capa_fisica.v:88" *)
  wire [31:0] _0005_;
  (* src = "capa_fisica.v:88" *)
  wire _0006_;
  (* src = "capa_fisica.v:88" *)
  wire _0007_;
  (* src = "capa_fisica.v:88" *)
  wire _0008_;
  (* src = "capa_fisica.v:88" *)
  wire _0009_;
  (* src = "capa_fisica.v:88" *)
  wire _0010_;
  (* src = "capa_fisica.v:88" *)
  wire _0011_;
  (* src = "capa_fisica.v:88" *)
  wire [15:0] _0012_;
  (* src = "capa_fisica.v:88" *)
  wire _0013_;
  (* src = "capa_fisica.v:88" *)
  wire [31:0] _0014_;
  (* src = "capa_fisica.v:88" *)
  wire _0015_;
  (* src = "capa_fisica.v:88" *)
  wire _0016_;
  wire _0017_;
  wire _0018_;
  wire _0019_;
  wire _0020_;
  wire _0021_;
  wire _0022_;
  wire _0023_;
  wire _0024_;
  wire _0025_;
  wire _0026_;
  wire _0027_;
  wire _0028_;
  wire _0029_;
  wire _0030_;
  wire _0031_;
  wire _0032_;
  wire _0033_;
  wire _0034_;
  wire _0035_;
  wire _0036_;
  wire _0037_;
  wire _0038_;
  wire _0039_;
  wire _0040_;
  wire _0041_;
  wire _0042_;
  wire _0043_;
  wire _0044_;
  wire _0045_;
  wire _0046_;
  wire _0047_;
  wire _0048_;
  wire _0049_;
  wire _0050_;
  wire _0051_;
  wire _0052_;
  wire _0053_;
  wire _0054_;
  wire _0055_;
  wire _0056_;
  wire _0057_;
  wire _0058_;
  wire _0059_;
  wire _0060_;
  wire _0061_;
  wire _0062_;
  wire _0063_;
  wire _0064_;
  wire _0065_;
  wire _0066_;
  wire _0067_;
  wire _0068_;
  wire _0069_;
  wire _0070_;
  wire _0071_;
  wire _0072_;
  wire _0073_;
  wire _0074_;
  wire _0075_;
  wire _0076_;
  wire _0077_;
  wire _0078_;
  wire _0079_;
  wire _0080_;
  wire _0081_;
  wire _0082_;
  wire _0083_;
  wire _0084_;
  wire _0085_;
  wire _0086_;
  wire _0087_;
  wire _0088_;
  wire _0089_;
  wire _0090_;
  wire _0091_;
  wire _0092_;
  wire _0093_;
  wire _0094_;
  wire _0095_;
  wire _0096_;
  wire _0097_;
  wire _0098_;
  wire _0099_;
  wire _0100_;
  wire _0101_;
  wire _0102_;
  wire _0103_;
  wire _0104_;
  wire _0105_;
  wire _0106_;
  wire _0107_;
  wire _0108_;
  wire _0109_;
  wire _0110_;
  wire _0111_;
  wire _0112_;
  wire _0113_;
  wire _0114_;
  wire _0115_;
  wire _0116_;
  wire _0117_;
  wire _0118_;
  wire _0119_;
  wire _0120_;
  wire _0121_;
  wire _0122_;
  wire _0123_;
  wire _0124_;
  wire _0125_;
  wire _0126_;
  wire _0127_;
  wire _0128_;
  wire _0129_;
  wire _0130_;
  wire _0131_;
  wire _0132_;
  wire _0133_;
  wire _0134_;
  wire _0135_;
  wire _0136_;
  wire _0137_;
  wire _0138_;
  wire _0139_;
  wire _0140_;
  wire _0141_;
  wire _0142_;
  wire _0143_;
  wire _0144_;
  wire _0145_;
  wire _0146_;
  wire _0147_;
  wire _0148_;
  wire _0149_;
  wire _0150_;
  wire _0151_;
  wire _0152_;
  wire _0153_;
  wire _0154_;
  wire _0155_;
  wire _0156_;
  wire _0157_;
  wire _0158_;
  wire _0159_;
  wire _0160_;
  wire _0161_;
  wire _0162_;
  wire _0163_;
  wire _0164_;
  wire _0165_;
  wire _0166_;
  wire _0167_;
  wire _0168_;
  wire _0169_;
  wire _0170_;
  wire _0171_;
  wire _0172_;
  wire _0173_;
  wire _0174_;
  wire _0175_;
  wire _0176_;
  wire _0177_;
  wire _0178_;
  wire _0179_;
  wire _0180_;
  wire _0181_;
  wire _0182_;
  wire _0183_;
  wire _0184_;
  wire _0185_;
  wire _0186_;
  wire _0187_;
  wire _0188_;
  wire _0189_;
  wire _0190_;
  wire _0191_;
  wire _0192_;
  wire _0193_;
  wire _0194_;
  wire _0195_;
  wire _0196_;
  wire _0197_;
  wire _0198_;
  wire _0199_;
  wire _0200_;
  wire _0201_;
  wire _0202_;
  wire _0203_;
  wire _0204_;
  wire _0205_;
  wire _0206_;
  wire _0207_;
  wire _0208_;
  wire _0209_;
  wire _0210_;
  wire _0211_;
  wire _0212_;
  wire _0213_;
  wire _0214_;
  wire _0215_;
  wire _0216_;
  wire _0217_;
  wire _0218_;
  wire _0219_;
  wire _0220_;
  wire _0221_;
  wire _0222_;
  wire _0223_;
  wire _0224_;
  wire _0225_;
  wire _0226_;
  wire _0227_;
  wire _0228_;
  wire _0229_;
  wire _0230_;
  wire _0231_;
  wire _0232_;
  wire _0233_;
  wire _0234_;
  wire _0235_;
  wire _0236_;
  wire _0237_;
  wire _0238_;
  wire _0239_;
  wire _0240_;
  wire _0241_;
  wire _0242_;
  wire _0243_;
  wire _0244_;
  wire _0245_;
  wire _0246_;
  wire _0247_;
  wire _0248_;
  wire _0249_;
  wire _0250_;
  wire _0251_;
  wire _0252_;
  wire _0253_;
  wire _0254_;
  wire _0255_;
  wire _0256_;
  wire _0257_;
  wire _0258_;
  wire _0259_;
  wire _0260_;
  wire _0261_;
  wire _0262_;
  wire _0263_;
  wire _0264_;
  wire _0265_;
  wire _0266_;
  wire _0267_;
  wire _0268_;
  wire _0269_;
  wire _0270_;
  wire _0271_;
  wire _0272_;
  wire _0273_;
  wire _0274_;
  wire _0275_;
  wire _0276_;
  wire _0277_;
  wire _0278_;
  wire _0279_;
  wire _0280_;
  wire _0281_;
  wire _0282_;
  wire _0283_;
  wire _0284_;
  wire _0285_;
  wire _0286_;
  wire _0287_;
  wire _0288_;
  wire _0289_;
  wire _0290_;
  wire _0291_;
  wire _0292_;
  wire _0293_;
  wire _0294_;
  wire _0295_;
  wire _0296_;
  wire _0297_;
  wire _0298_;
  wire _0299_;
  wire _0300_;
  wire _0301_;
  wire _0302_;
  wire _0303_;
  wire _0304_;
  wire _0305_;
  wire _0306_;
  wire _0307_;
  wire _0308_;
  wire _0309_;
  wire _0310_;
  wire _0311_;
  wire _0312_;
  wire _0313_;
  wire _0314_;
  wire _0315_;
  wire _0316_;
  wire _0317_;
  wire _0318_;
  wire _0319_;
  wire _0320_;
  wire _0321_;
  wire _0322_;
  wire _0323_;
  wire _0324_;
  wire _0325_;
  wire _0326_;
  wire _0327_;
  wire _0328_;
  wire _0329_;
  wire _0330_;
  wire _0331_;
  wire _0332_;
  wire _0333_;
  wire _0334_;
  wire _0335_;
  wire _0336_;
  wire _0337_;
  wire _0338_;
  wire _0339_;
  wire _0340_;
  wire _0341_;
  wire _0342_;
  wire _0343_;
  wire _0344_;
  wire _0345_;
  wire _0346_;
  wire _0347_;
  wire _0348_;
  wire _0349_;
  wire _0350_;
  wire _0351_;
  wire _0352_;
  wire _0353_;
  wire _0354_;
  wire _0355_;
  wire _0356_;
  wire _0357_;
  wire _0358_;
  wire _0359_;
  wire _0360_;
  wire _0361_;
  wire _0362_;
  wire _0363_;
  wire _0364_;
  wire _0365_;
  wire _0366_;
  wire _0367_;
  wire _0368_;
  wire _0369_;
  wire _0370_;
  wire _0371_;
  wire _0372_;
  wire _0373_;
  wire _0374_;
  wire _0375_;
  wire _0376_;
  wire _0377_;
  wire _0378_;
  wire _0379_;
  wire _0380_;
  wire _0381_;
  wire _0382_;
  wire _0383_;
  wire _0384_;
  wire _0385_;
  wire _0386_;
  wire _0387_;
  wire _0388_;
  wire _0389_;
  wire _0390_;
  wire _0391_;
  wire _0392_;
  wire _0393_;
  wire _0394_;
  wire _0395_;
  wire _0396_;
  wire _0397_;
  wire _0398_;
  wire _0399_;
  wire _0400_;
  wire _0401_;
  wire _0402_;
  wire _0403_;
  wire _0404_;
  wire _0405_;
  wire _0406_;
  wire _0407_;
  wire _0408_;
  wire _0409_;
  wire _0410_;
  wire _0411_;
  wire _0412_;
  wire _0413_;
  wire _0414_;
  wire _0415_;
  wire _0416_;
  wire _0417_;
  wire _0418_;
  (* src = "capa_fisica.v:29" *)
  output IDLE_out_control;
  (* src = "capa_fisica.v:17" *)
  input SDclock;
  (* src = "capa_fisica.v:68" *)
  wire [31:0] SP_fifo;
  (* src = "capa_fisica.v:70" *)
  wire deserializerReset;
  (* src = "capa_fisica.v:32" *)
  output enable_PS;
  (* src = "capa_fisica.v:33" *)
  output enable_SP;
  (* src = "capa_fisica.v:67" *)
  wire [7:0] framesize;
  (* src = "capa_fisica.v:21" *)
  input [31:0] fromFifo_toPS;
  (* src = "capa_fisica.v:23" *)
  input fromSD_SP;
  (* src = "capa_fisica.v:36" *)
  output [31:0] fromSP_toFifo;
  (* src = "capa_fisica.v:31" *)
  output loadsend;
  (* src = "capa_fisica.v:16" *)
  input newService_control;
  (* src = "capa_fisica.v:35" *)
  output padEnable;
  (* src = "capa_fisica.v:34" *)
  output padState;
  (* src = "capa_fisica.v:27" *)
  output pop;
  (* src = "capa_fisica.v:28" *)
  output push;
  (* src = "capa_fisica.v:20" *)
  input reception_SD;
  (* src = "capa_fisica.v:25" *)
  output recibido;
  (* src = "capa_fisica.v:18" *)
  input reset;
  (* src = "capa_fisica.v:66" *)
  wire serializerReset;
  (* onehot = 32'd1 *)
  wire [8:0] state;
  (* src = "capa_fisica.v:65" *)
  wire [15:0] timeCount;
  (* src = "capa_fisica.v:30" *)
  output timeOutFail;
  (* src = "capa_fisica.v:15" *)
  input [15:0] timeout;
  (* src = "capa_fisica.v:14" *)
  input timeoutenable;
  (* src = "capa_fisica.v:37" *)
  output [31:0] toPS_fromFifo;
  (* src = "capa_fisica.v:38" *)
  output toSD_PS;
  (* src = "capa_fisica.v:26" *)
  output transferComplete;
  (* src = "capa_fisica.v:19" *)
  input transmision_SD;
  (* src = "capa_fisica.v:69" *)
  wire wireSD_PS;
  (* src = "capa_fisica.v:13" *)
  input writeRead_control;
  NOR _0419_ (
    .A(state[5]),
    .B(state[6]),
    .Y(_0017_)
  );
  NOR _0420_ (
    .A(_0017_),
    .B(reset),
    .Y(_0002_)
  );
  NOT _0421_ (
    .A(_0002_),
    .Y(_0018_)
  );
  NOT _0422_ (
    .A(transmision_SD),
    .Y(_0019_)
  );
  NOR _0423_ (
    .A(_0019_),
    .B(state[6]),
    .Y(_0020_)
  );
  NOR _0424_ (
    .A(_0020_),
    .B(_0018_),
    .Y(_0065_)
  );
  NOT _0425_ (
    .A(state[4]),
    .Y(_0021_)
  );
  NOT _0426_ (
    .A(reception_SD),
    .Y(_0022_)
  );
  NOR _0427_ (
    .A(_0022_),
    .B(_0021_),
    .Y(_0023_)
  );
  NOR _0428_ (
    .A(_0023_),
    .B(state[2]),
    .Y(_0024_)
  );
  NOR _0429_ (
    .A(_0024_),
    .B(reset),
    .Y(_0096_)
  );
  NOR _0430_ (
    .A(_0021_),
    .B(reset),
    .Y(_0025_)
  );
  NOT _0431_ (
    .A(_0025_),
    .Y(_0026_)
  );
  NOR _0432_ (
    .A(_0026_),
    .B(reception_SD),
    .Y(_0027_)
  );
  NOT _0433_ (
    .A(_0027_),
    .Y(_0028_)
  );
  NOT _0434_ (
    .A(state[5]),
    .Y(_0029_)
  );
  NOR _0435_ (
    .A(_0029_),
    .B(reset),
    .Y(_0006_)
  );
  NAND _0436_ (
    .A(_0006_),
    .B(transmision_SD),
    .Y(_0030_)
  );
  NAND _0437_ (
    .A(_0030_),
    .B(_0028_),
    .Y(_0156_)
  );
  NOT _0438_ (
    .A(state[3]),
    .Y(_0031_)
  );
  NOR _0439_ (
    .A(_0031_),
    .B(reset),
    .Y(_0032_)
  );
  NAND _0440_ (
    .A(_0032_),
    .B(_0022_),
    .Y(_0033_)
  );
  NOT _0441_ (
    .A(state[8]),
    .Y(_0034_)
  );
  NOR _0442_ (
    .A(_0034_),
    .B(reset),
    .Y(_0000_)
  );
  NOT _0443_ (
    .A(newService_control),
    .Y(_0035_)
  );
  NOR _0444_ (
    .A(_0035_),
    .B(writeRead_control),
    .Y(_0036_)
  );
  NAND _0445_ (
    .A(_0036_),
    .B(_0000_),
    .Y(_0037_)
  );
  NAND _0446_ (
    .A(_0037_),
    .B(_0033_),
    .Y(_0282_)
  );
  NOT _0447_ (
    .A(state[1]),
    .Y(_0038_)
  );
  NOT _0448_ (
    .A(state[0]),
    .Y(_0039_)
  );
  NAND _0449_ (
    .A(_0039_),
    .B(_0038_),
    .Y(_0040_)
  );
  NOR _0450_ (
    .A(newService_control),
    .B(_0034_),
    .Y(_0041_)
  );
  NOR _0451_ (
    .A(_0041_),
    .B(_0040_),
    .Y(_0042_)
  );
  NOR _0452_ (
    .A(_0042_),
    .B(reset),
    .Y(_0334_)
  );
  NOT _0453_ (
    .A(timeCount[2]),
    .Y(_0043_)
  );
  NOR _0454_ (
    .A(timeout[2]),
    .B(_0043_),
    .Y(_0044_)
  );
  NOT _0455_ (
    .A(_0044_),
    .Y(_0045_)
  );
  NOT _0456_ (
    .A(timeout[2]),
    .Y(_0046_)
  );
  NOR _0457_ (
    .A(_0046_),
    .B(timeCount[2]),
    .Y(_0047_)
  );
  NOT _0458_ (
    .A(_0047_),
    .Y(_0048_)
  );
  NAND _0459_ (
    .A(_0048_),
    .B(_0045_),
    .Y(_0049_)
  );
  NOT _0460_ (
    .A(timeout[4]),
    .Y(_0050_)
  );
  NOR _0461_ (
    .A(_0050_),
    .B(timeCount[4]),
    .Y(_0051_)
  );
  NOT _0462_ (
    .A(_0051_),
    .Y(_0052_)
  );
  NOT _0463_ (
    .A(timeCount[4]),
    .Y(_0053_)
  );
  NOR _0464_ (
    .A(timeout[4]),
    .B(_0053_),
    .Y(_0054_)
  );
  NOT _0465_ (
    .A(_0054_),
    .Y(_0055_)
  );
  NAND _0466_ (
    .A(_0055_),
    .B(_0052_),
    .Y(_0056_)
  );
  NOR _0467_ (
    .A(_0056_),
    .B(_0049_),
    .Y(_0057_)
  );
  NOT _0468_ (
    .A(timeout[11]),
    .Y(_0058_)
  );
  NOR _0469_ (
    .A(_0058_),
    .B(timeCount[11]),
    .Y(_0059_)
  );
  NOT _0470_ (
    .A(_0059_),
    .Y(_0060_)
  );
  NAND _0471_ (
    .A(_0058_),
    .B(timeCount[11]),
    .Y(_0061_)
  );
  NAND _0472_ (
    .A(_0061_),
    .B(_0060_),
    .Y(_0062_)
  );
  NOT _0473_ (
    .A(timeCount[12]),
    .Y(_0063_)
  );
  NAND _0474_ (
    .A(timeout[12]),
    .B(_0063_),
    .Y(_0064_)
  );
  NAND _0475_ (
    .A(_0064_),
    .B(_0022_),
    .Y(_0066_)
  );
  NOR _0476_ (
    .A(_0066_),
    .B(_0062_),
    .Y(_0067_)
  );
  NAND _0477_ (
    .A(_0067_),
    .B(_0057_),
    .Y(_0068_)
  );
  NOT _0478_ (
    .A(timeout[5]),
    .Y(_0069_)
  );
  NOR _0479_ (
    .A(_0069_),
    .B(timeCount[5]),
    .Y(_0070_)
  );
  NOT _0480_ (
    .A(timeCount[5]),
    .Y(_0071_)
  );
  NOR _0481_ (
    .A(timeout[5]),
    .B(_0071_),
    .Y(_0072_)
  );
  NOR _0482_ (
    .A(_0072_),
    .B(_0070_),
    .Y(_0073_)
  );
  NOT _0483_ (
    .A(timeCount[0]),
    .Y(_0074_)
  );
  NOR _0484_ (
    .A(timeout[0]),
    .B(_0074_),
    .Y(_0075_)
  );
  NOT _0485_ (
    .A(timeout[0]),
    .Y(_0076_)
  );
  NOR _0486_ (
    .A(_0076_),
    .B(timeCount[0]),
    .Y(_0077_)
  );
  NOR _0487_ (
    .A(_0077_),
    .B(_0075_),
    .Y(_0078_)
  );
  NAND _0488_ (
    .A(_0078_),
    .B(_0073_),
    .Y(_0079_)
  );
  NOT _0489_ (
    .A(timeout[8]),
    .Y(_0080_)
  );
  NOR _0490_ (
    .A(_0080_),
    .B(timeCount[8]),
    .Y(_0081_)
  );
  NAND _0491_ (
    .A(_0080_),
    .B(timeCount[8]),
    .Y(_0082_)
  );
  NOT _0492_ (
    .A(timeout[13]),
    .Y(_0083_)
  );
  NAND _0493_ (
    .A(_0083_),
    .B(timeCount[13]),
    .Y(_0084_)
  );
  NAND _0494_ (
    .A(_0084_),
    .B(_0082_),
    .Y(_0085_)
  );
  NOR _0495_ (
    .A(_0085_),
    .B(_0081_),
    .Y(_0086_)
  );
  NOT _0496_ (
    .A(timeout[6]),
    .Y(_0087_)
  );
  NAND _0497_ (
    .A(_0087_),
    .B(timeCount[6]),
    .Y(_0088_)
  );
  NOT _0498_ (
    .A(timeout[12]),
    .Y(_0089_)
  );
  NAND _0499_ (
    .A(_0089_),
    .B(timeCount[12]),
    .Y(_0090_)
  );
  NAND _0500_ (
    .A(_0090_),
    .B(_0088_),
    .Y(_0091_)
  );
  NOT _0501_ (
    .A(timeCount[6]),
    .Y(_0092_)
  );
  NAND _0502_ (
    .A(timeout[6]),
    .B(_0092_),
    .Y(_0093_)
  );
  NOT _0503_ (
    .A(timeout[15]),
    .Y(_0094_)
  );
  NAND _0504_ (
    .A(_0094_),
    .B(timeCount[15]),
    .Y(_0095_)
  );
  NAND _0505_ (
    .A(_0095_),
    .B(_0093_),
    .Y(_0097_)
  );
  NOR _0506_ (
    .A(_0097_),
    .B(_0091_),
    .Y(_0098_)
  );
  NAND _0507_ (
    .A(_0098_),
    .B(_0086_),
    .Y(_0099_)
  );
  NOR _0508_ (
    .A(_0099_),
    .B(_0079_),
    .Y(_0100_)
  );
  NOT _0509_ (
    .A(timeCount[10]),
    .Y(_0101_)
  );
  NOT _0510_ (
    .A(timeout[10]),
    .Y(_0102_)
  );
  NAND _0511_ (
    .A(_0102_),
    .B(_0101_),
    .Y(_0103_)
  );
  NAND _0512_ (
    .A(timeout[10]),
    .B(timeCount[10]),
    .Y(_0104_)
  );
  NAND _0513_ (
    .A(_0104_),
    .B(_0103_),
    .Y(_0105_)
  );
  NOR _0514_ (
    .A(timeout[9]),
    .B(timeCount[9]),
    .Y(_0106_)
  );
  NOT _0515_ (
    .A(timeCount[9]),
    .Y(_0107_)
  );
  NOT _0516_ (
    .A(timeout[9]),
    .Y(_0108_)
  );
  NOR _0517_ (
    .A(_0108_),
    .B(_0107_),
    .Y(_0109_)
  );
  NOR _0518_ (
    .A(_0109_),
    .B(_0106_),
    .Y(_0110_)
  );
  NOT _0519_ (
    .A(timeout[1]),
    .Y(_0111_)
  );
  NAND _0520_ (
    .A(_0111_),
    .B(timeCount[1]),
    .Y(_0112_)
  );
  NOT _0521_ (
    .A(timeCount[1]),
    .Y(_0113_)
  );
  NAND _0522_ (
    .A(timeout[1]),
    .B(_0113_),
    .Y(_0114_)
  );
  NAND _0523_ (
    .A(_0114_),
    .B(_0112_),
    .Y(_0115_)
  );
  NOR _0524_ (
    .A(_0115_),
    .B(_0110_),
    .Y(_0116_)
  );
  NAND _0525_ (
    .A(_0116_),
    .B(_0105_),
    .Y(_0117_)
  );
  NOR _0526_ (
    .A(timeout[3]),
    .B(timeCount[3]),
    .Y(_0118_)
  );
  NOT _0527_ (
    .A(timeCount[3]),
    .Y(_0119_)
  );
  NOT _0528_ (
    .A(timeout[3]),
    .Y(_0120_)
  );
  NOR _0529_ (
    .A(_0120_),
    .B(_0119_),
    .Y(_0121_)
  );
  NOR _0530_ (
    .A(_0121_),
    .B(_0118_),
    .Y(_0122_)
  );
  NOT _0531_ (
    .A(timeCount[15]),
    .Y(_0123_)
  );
  NAND _0532_ (
    .A(timeout[15]),
    .B(_0123_),
    .Y(_0124_)
  );
  NOT _0533_ (
    .A(timeCount[13]),
    .Y(_0125_)
  );
  NAND _0534_ (
    .A(timeout[13]),
    .B(_0125_),
    .Y(_0126_)
  );
  NAND _0535_ (
    .A(_0126_),
    .B(_0124_),
    .Y(_0127_)
  );
  NOR _0536_ (
    .A(_0127_),
    .B(_0122_),
    .Y(_0128_)
  );
  NOR _0537_ (
    .A(timeout[14]),
    .B(timeCount[14]),
    .Y(_0129_)
  );
  NOT _0538_ (
    .A(timeCount[14]),
    .Y(_0130_)
  );
  NOT _0539_ (
    .A(timeout[14]),
    .Y(_0131_)
  );
  NOR _0540_ (
    .A(_0131_),
    .B(_0130_),
    .Y(_0132_)
  );
  NOR _0541_ (
    .A(_0132_),
    .B(_0129_),
    .Y(_0133_)
  );
  NOT _0542_ (
    .A(timeCount[7]),
    .Y(_0134_)
  );
  NAND _0543_ (
    .A(timeout[7]),
    .B(_0134_),
    .Y(_0135_)
  );
  NOT _0544_ (
    .A(timeout[7]),
    .Y(_0136_)
  );
  NAND _0545_ (
    .A(_0136_),
    .B(timeCount[7]),
    .Y(_0137_)
  );
  NAND _0546_ (
    .A(_0137_),
    .B(_0135_),
    .Y(_0138_)
  );
  NOR _0547_ (
    .A(_0138_),
    .B(_0133_),
    .Y(_0139_)
  );
  NAND _0548_ (
    .A(_0139_),
    .B(_0128_),
    .Y(_0140_)
  );
  NOR _0549_ (
    .A(_0140_),
    .B(_0117_),
    .Y(_0141_)
  );
  NAND _0550_ (
    .A(_0141_),
    .B(_0100_),
    .Y(_0142_)
  );
  NOR _0551_ (
    .A(_0142_),
    .B(_0068_),
    .Y(_0143_)
  );
  NAND _0552_ (
    .A(_0143_),
    .B(timeoutenable),
    .Y(_0144_)
  );
  NAND _0553_ (
    .A(_0144_),
    .B(_0025_),
    .Y(_0145_)
  );
  NAND _0554_ (
    .A(timeoutenable),
    .B(_0022_),
    .Y(_0146_)
  );
  NOR _0555_ (
    .A(_0146_),
    .B(_0074_),
    .Y(_0147_)
  );
  NOT _0556_ (
    .A(_0147_),
    .Y(_0148_)
  );
  NAND _0557_ (
    .A(_0146_),
    .B(_0074_),
    .Y(_0149_)
  );
  NAND _0558_ (
    .A(_0149_),
    .B(_0148_),
    .Y(_0150_)
  );
  NOR _0559_ (
    .A(_0150_),
    .B(_0145_),
    .Y(_0012_[0])
  );
  NAND _0560_ (
    .A(_0148_),
    .B(_0113_),
    .Y(_0151_)
  );
  NOT _0561_ (
    .A(timeoutenable),
    .Y(_0152_)
  );
  NOR _0562_ (
    .A(_0152_),
    .B(reception_SD),
    .Y(_0153_)
  );
  NOR _0563_ (
    .A(_0113_),
    .B(_0074_),
    .Y(_0154_)
  );
  NAND _0564_ (
    .A(_0154_),
    .B(_0153_),
    .Y(_0155_)
  );
  NAND _0565_ (
    .A(_0155_),
    .B(_0151_),
    .Y(_0157_)
  );
  NOR _0566_ (
    .A(_0157_),
    .B(_0145_),
    .Y(_0012_[1])
  );
  NAND _0567_ (
    .A(timeCount[1]),
    .B(timeCount[0]),
    .Y(_0158_)
  );
  NOR _0568_ (
    .A(_0158_),
    .B(_0146_),
    .Y(_0159_)
  );
  NAND _0569_ (
    .A(_0159_),
    .B(timeCount[2]),
    .Y(_0160_)
  );
  NAND _0570_ (
    .A(_0155_),
    .B(_0043_),
    .Y(_0161_)
  );
  NAND _0571_ (
    .A(_0161_),
    .B(_0160_),
    .Y(_0162_)
  );
  NOR _0572_ (
    .A(_0162_),
    .B(_0145_),
    .Y(_0012_[2])
  );
  NAND _0573_ (
    .A(_0160_),
    .B(_0119_),
    .Y(_0163_)
  );
  NOR _0574_ (
    .A(_0119_),
    .B(_0043_),
    .Y(_0164_)
  );
  NAND _0575_ (
    .A(_0164_),
    .B(_0159_),
    .Y(_0165_)
  );
  NAND _0576_ (
    .A(_0165_),
    .B(_0163_),
    .Y(_0166_)
  );
  NOR _0577_ (
    .A(_0166_),
    .B(_0145_),
    .Y(_0012_[3])
  );
  NAND _0578_ (
    .A(_0165_),
    .B(_0053_),
    .Y(_0167_)
  );
  NAND _0579_ (
    .A(timeCount[3]),
    .B(timeCount[2]),
    .Y(_0168_)
  );
  NOR _0580_ (
    .A(_0168_),
    .B(_0053_),
    .Y(_0169_)
  );
  NAND _0581_ (
    .A(_0169_),
    .B(_0159_),
    .Y(_0170_)
  );
  NAND _0582_ (
    .A(_0170_),
    .B(_0167_),
    .Y(_0171_)
  );
  NOR _0583_ (
    .A(_0171_),
    .B(_0145_),
    .Y(_0012_[4])
  );
  NOR _0584_ (
    .A(_0170_),
    .B(_0071_),
    .Y(_0172_)
  );
  NOT _0585_ (
    .A(_0172_),
    .Y(_0173_)
  );
  NAND _0586_ (
    .A(_0170_),
    .B(_0071_),
    .Y(_0174_)
  );
  NAND _0587_ (
    .A(_0174_),
    .B(_0173_),
    .Y(_0175_)
  );
  NOR _0588_ (
    .A(_0175_),
    .B(_0145_),
    .Y(_0012_[5])
  );
  NAND _0589_ (
    .A(_0173_),
    .B(_0092_),
    .Y(_0176_)
  );
  NAND _0590_ (
    .A(_0172_),
    .B(timeCount[6]),
    .Y(_0177_)
  );
  NAND _0591_ (
    .A(_0177_),
    .B(_0176_),
    .Y(_0178_)
  );
  NOR _0592_ (
    .A(_0178_),
    .B(_0145_),
    .Y(_0012_[6])
  );
  NAND _0593_ (
    .A(timeCount[7]),
    .B(timeCount[6]),
    .Y(_0179_)
  );
  NOT _0594_ (
    .A(_0179_),
    .Y(_0180_)
  );
  NAND _0595_ (
    .A(_0180_),
    .B(_0172_),
    .Y(_0181_)
  );
  NAND _0596_ (
    .A(_0177_),
    .B(_0134_),
    .Y(_0182_)
  );
  NAND _0597_ (
    .A(_0182_),
    .B(_0181_),
    .Y(_0183_)
  );
  NOR _0598_ (
    .A(_0183_),
    .B(_0145_),
    .Y(_0012_[7])
  );
  NOR _0599_ (
    .A(_0177_),
    .B(_0134_),
    .Y(_0184_)
  );
  NAND _0600_ (
    .A(_0184_),
    .B(timeCount[8]),
    .Y(_0185_)
  );
  NOT _0601_ (
    .A(timeCount[8]),
    .Y(_0186_)
  );
  NAND _0602_ (
    .A(_0181_),
    .B(_0186_),
    .Y(_0187_)
  );
  NAND _0603_ (
    .A(_0187_),
    .B(_0185_),
    .Y(_0188_)
  );
  NOR _0604_ (
    .A(_0188_),
    .B(_0145_),
    .Y(_0012_[8])
  );
  NAND _0605_ (
    .A(timeCount[9]),
    .B(timeCount[8]),
    .Y(_0189_)
  );
  NOR _0606_ (
    .A(_0189_),
    .B(_0181_),
    .Y(_0190_)
  );
  NOT _0607_ (
    .A(_0072_),
    .Y(_0191_)
  );
  NAND _0608_ (
    .A(timeout[10]),
    .B(_0101_),
    .Y(_0192_)
  );
  NAND _0609_ (
    .A(_0192_),
    .B(_0191_),
    .Y(_0193_)
  );
  NOR _0610_ (
    .A(_0193_),
    .B(_0070_),
    .Y(_0194_)
  );
  NOR _0611_ (
    .A(_0051_),
    .B(_0044_),
    .Y(_0195_)
  );
  NOR _0612_ (
    .A(timeout[10]),
    .B(_0101_),
    .Y(_0196_)
  );
  NOR _0613_ (
    .A(_0196_),
    .B(_0047_),
    .Y(_0197_)
  );
  NAND _0614_ (
    .A(_0197_),
    .B(_0195_),
    .Y(_0198_)
  );
  NOR _0615_ (
    .A(timeout[8]),
    .B(_0186_),
    .Y(_0199_)
  );
  NOR _0616_ (
    .A(_0199_),
    .B(_0059_),
    .Y(_0200_)
  );
  NOR _0617_ (
    .A(_0081_),
    .B(_0054_),
    .Y(_0201_)
  );
  NAND _0618_ (
    .A(_0201_),
    .B(_0200_),
    .Y(_0202_)
  );
  NOR _0619_ (
    .A(_0202_),
    .B(_0198_),
    .Y(_0203_)
  );
  NAND _0620_ (
    .A(_0203_),
    .B(_0194_),
    .Y(_0204_)
  );
  NOT _0621_ (
    .A(_0129_),
    .Y(_0205_)
  );
  NAND _0622_ (
    .A(timeout[14]),
    .B(timeCount[14]),
    .Y(_0206_)
  );
  NAND _0623_ (
    .A(_0206_),
    .B(_0205_),
    .Y(_0207_)
  );
  NOT _0624_ (
    .A(_0106_),
    .Y(_0208_)
  );
  NAND _0625_ (
    .A(timeout[9]),
    .B(timeCount[9]),
    .Y(_0209_)
  );
  NAND _0626_ (
    .A(_0209_),
    .B(_0208_),
    .Y(_0210_)
  );
  NAND _0627_ (
    .A(_0210_),
    .B(_0207_),
    .Y(_0211_)
  );
  NOR _0628_ (
    .A(_0211_),
    .B(_0122_),
    .Y(_0212_)
  );
  NAND _0629_ (
    .A(_0088_),
    .B(_0135_),
    .Y(_0213_)
  );
  NAND _0630_ (
    .A(_0090_),
    .B(_0093_),
    .Y(_0214_)
  );
  NOR _0631_ (
    .A(_0214_),
    .B(_0213_),
    .Y(_0215_)
  );
  NAND _0632_ (
    .A(_0124_),
    .B(_0153_),
    .Y(_0216_)
  );
  NAND _0633_ (
    .A(_0095_),
    .B(_0137_),
    .Y(_0217_)
  );
  NOR _0634_ (
    .A(_0217_),
    .B(_0216_),
    .Y(_0218_)
  );
  NAND _0635_ (
    .A(_0218_),
    .B(_0215_),
    .Y(_0219_)
  );
  NAND _0636_ (
    .A(_0076_),
    .B(timeCount[0]),
    .Y(_0220_)
  );
  NAND _0637_ (
    .A(_0220_),
    .B(_0064_),
    .Y(_0221_)
  );
  NAND _0638_ (
    .A(timeout[0]),
    .B(_0074_),
    .Y(_0222_)
  );
  NAND _0639_ (
    .A(_0222_),
    .B(_0061_),
    .Y(_0223_)
  );
  NOR _0640_ (
    .A(_0223_),
    .B(_0221_),
    .Y(_0224_)
  );
  NAND _0641_ (
    .A(_0084_),
    .B(_0126_),
    .Y(_0225_)
  );
  NOR _0642_ (
    .A(_0225_),
    .B(_0115_),
    .Y(_0226_)
  );
  NAND _0643_ (
    .A(_0226_),
    .B(_0224_),
    .Y(_0227_)
  );
  NOR _0644_ (
    .A(_0227_),
    .B(_0219_),
    .Y(_0228_)
  );
  NAND _0645_ (
    .A(_0228_),
    .B(_0212_),
    .Y(_0229_)
  );
  NOR _0646_ (
    .A(_0229_),
    .B(_0204_),
    .Y(_0230_)
  );
  NOR _0647_ (
    .A(_0230_),
    .B(_0026_),
    .Y(_0231_)
  );
  NAND _0648_ (
    .A(_0185_),
    .B(_0107_),
    .Y(_0232_)
  );
  NAND _0649_ (
    .A(_0232_),
    .B(_0231_),
    .Y(_0233_)
  );
  NOR _0650_ (
    .A(_0233_),
    .B(_0190_),
    .Y(_0012_[9])
  );
  NOT _0651_ (
    .A(_0189_),
    .Y(_0234_)
  );
  NAND _0652_ (
    .A(_0234_),
    .B(_0184_),
    .Y(_0235_)
  );
  NAND _0653_ (
    .A(_0235_),
    .B(_0101_),
    .Y(_0236_)
  );
  NAND _0654_ (
    .A(_0190_),
    .B(timeCount[10]),
    .Y(_0237_)
  );
  NAND _0655_ (
    .A(_0237_),
    .B(_0236_),
    .Y(_0238_)
  );
  NOR _0656_ (
    .A(_0238_),
    .B(_0145_),
    .Y(_0012_[10])
  );
  NOR _0657_ (
    .A(_0189_),
    .B(_0101_),
    .Y(_0239_)
  );
  NAND _0658_ (
    .A(_0239_),
    .B(timeCount[11]),
    .Y(_0240_)
  );
  NOR _0659_ (
    .A(_0240_),
    .B(_0181_),
    .Y(_0241_)
  );
  NOT _0660_ (
    .A(timeCount[11]),
    .Y(_0242_)
  );
  NAND _0661_ (
    .A(_0237_),
    .B(_0242_),
    .Y(_0243_)
  );
  NAND _0662_ (
    .A(_0243_),
    .B(_0231_),
    .Y(_0244_)
  );
  NOR _0663_ (
    .A(_0244_),
    .B(_0241_),
    .Y(_0012_[11])
  );
  NAND _0664_ (
    .A(timeCount[5]),
    .B(_0022_),
    .Y(_0245_)
  );
  NOR _0665_ (
    .A(_0245_),
    .B(_0158_),
    .Y(_0246_)
  );
  NAND _0666_ (
    .A(_0246_),
    .B(_0180_),
    .Y(_0247_)
  );
  NAND _0667_ (
    .A(timeCount[11]),
    .B(timeCount[10]),
    .Y(_0248_)
  );
  NOR _0668_ (
    .A(_0248_),
    .B(_0189_),
    .Y(_0249_)
  );
  NAND _0669_ (
    .A(_0249_),
    .B(_0169_),
    .Y(_0250_)
  );
  NOR _0670_ (
    .A(_0250_),
    .B(_0247_),
    .Y(_0251_)
  );
  NAND _0671_ (
    .A(_0251_),
    .B(timeoutenable),
    .Y(_0252_)
  );
  NAND _0672_ (
    .A(_0252_),
    .B(_0063_),
    .Y(_0253_)
  );
  NOR _0673_ (
    .A(_0152_),
    .B(_0063_),
    .Y(_0254_)
  );
  NAND _0674_ (
    .A(_0254_),
    .B(_0251_),
    .Y(_0255_)
  );
  NAND _0675_ (
    .A(_0255_),
    .B(_0253_),
    .Y(_0256_)
  );
  NOR _0676_ (
    .A(_0256_),
    .B(_0145_),
    .Y(_0012_[12])
  );
  NAND _0677_ (
    .A(_0255_),
    .B(_0125_),
    .Y(_0257_)
  );
  NOR _0678_ (
    .A(_0071_),
    .B(reception_SD),
    .Y(_0258_)
  );
  NAND _0679_ (
    .A(_0258_),
    .B(_0154_),
    .Y(_0259_)
  );
  NOR _0680_ (
    .A(_0259_),
    .B(_0179_),
    .Y(_0260_)
  );
  NAND _0681_ (
    .A(_0164_),
    .B(timeCount[4]),
    .Y(_0261_)
  );
  NOR _0682_ (
    .A(_0240_),
    .B(_0261_),
    .Y(_0262_)
  );
  NAND _0683_ (
    .A(_0262_),
    .B(_0260_),
    .Y(_0263_)
  );
  NOT _0684_ (
    .A(_0254_),
    .Y(_0264_)
  );
  NOR _0685_ (
    .A(_0264_),
    .B(_0263_),
    .Y(_0265_)
  );
  NAND _0686_ (
    .A(_0265_),
    .B(timeCount[13]),
    .Y(_0266_)
  );
  NAND _0687_ (
    .A(_0266_),
    .B(_0257_),
    .Y(_0267_)
  );
  NOR _0688_ (
    .A(_0267_),
    .B(_0145_),
    .Y(_0012_[13])
  );
  NAND _0689_ (
    .A(_0266_),
    .B(_0130_),
    .Y(_0268_)
  );
  NOR _0690_ (
    .A(_0255_),
    .B(_0125_),
    .Y(_0269_)
  );
  NAND _0691_ (
    .A(_0269_),
    .B(timeCount[14]),
    .Y(_0270_)
  );
  NAND _0692_ (
    .A(_0270_),
    .B(_0268_),
    .Y(_0271_)
  );
  NOR _0693_ (
    .A(_0271_),
    .B(_0145_),
    .Y(_0012_[14])
  );
  NOR _0694_ (
    .A(_0266_),
    .B(_0130_),
    .Y(_0272_)
  );
  NOR _0695_ (
    .A(_0272_),
    .B(_0123_),
    .Y(_0273_)
  );
  NOR _0696_ (
    .A(_0270_),
    .B(timeCount[15]),
    .Y(_0274_)
  );
  NOR _0697_ (
    .A(_0274_),
    .B(_0273_),
    .Y(_0275_)
  );
  NOR _0698_ (
    .A(_0275_),
    .B(_0145_),
    .Y(_0012_[15])
  );
  NAND _0699_ (
    .A(deserializerReset),
    .B(_0034_),
    .Y(_0276_)
  );
  NOR _0700_ (
    .A(state[2]),
    .B(state[3]),
    .Y(_0277_)
  );
  NAND _0701_ (
    .A(_0277_),
    .B(_0021_),
    .Y(_0278_)
  );
  NOR _0702_ (
    .A(_0278_),
    .B(_0276_),
    .Y(_0279_)
  );
  NAND _0703_ (
    .A(_0279_),
    .B(_0017_),
    .Y(_0280_)
  );
  NOR _0704_ (
    .A(state[0]),
    .B(reset),
    .Y(_0281_)
  );
  NOT _0705_ (
    .A(_0281_),
    .Y(_0283_)
  );
  NOT _0706_ (
    .A(state[7]),
    .Y(_0284_)
  );
  NAND _0707_ (
    .A(_0284_),
    .B(_0038_),
    .Y(_0285_)
  );
  NOR _0708_ (
    .A(_0285_),
    .B(_0283_),
    .Y(_0287_)
  );
  NAND _0709_ (
    .A(_0287_),
    .B(_0280_),
    .Y(_0001_)
  );
  NOR _0710_ (
    .A(state[1]),
    .B(state[8]),
    .Y(_0290_)
  );
  NOR _0711_ (
    .A(_0290_),
    .B(reset),
    .Y(_0004_[0])
  );
  NOR _0712_ (
    .A(state[7]),
    .B(state[6]),
    .Y(_0291_)
  );
  NOR _0713_ (
    .A(_0291_),
    .B(reset),
    .Y(_0292_)
  );
  NOR _0714_ (
    .A(_0292_),
    .B(_0006_),
    .Y(_0293_)
  );
  NAND _0715_ (
    .A(_0293_),
    .B(_0026_),
    .Y(_0004_[3])
  );
  NOR _0716_ (
    .A(_0283_),
    .B(state[3]),
    .Y(_0294_)
  );
  NOR _0717_ (
    .A(state[2]),
    .B(state[5]),
    .Y(_0295_)
  );
  NAND _0718_ (
    .A(_0295_),
    .B(_0021_),
    .Y(_0296_)
  );
  NAND _0719_ (
    .A(_0291_),
    .B(_0290_),
    .Y(_0297_)
  );
  NOR _0720_ (
    .A(_0297_),
    .B(_0296_),
    .Y(_0298_)
  );
  NAND _0721_ (
    .A(_0298_),
    .B(_0294_),
    .Y(_0299_)
  );
  NOR _0722_ (
    .A(_0277_),
    .B(reset),
    .Y(_0300_)
  );
  NOT _0723_ (
    .A(_0300_),
    .Y(_0301_)
  );
  NAND _0724_ (
    .A(_0301_),
    .B(_0299_),
    .Y(_0004_[5])
  );
  NOT _0725_ (
    .A(_0299_),
    .Y(_0004_[7])
  );
  NAND _0726_ (
    .A(_0281_),
    .B(_0021_),
    .Y(_0011_)
  );
  NOT _0727_ (
    .A(wireSD_PS),
    .Y(_0302_)
  );
  NOR _0728_ (
    .A(_0283_),
    .B(_0302_),
    .Y(_0015_)
  );
  NAND _0729_ (
    .A(_0025_),
    .B(toPS_fromFifo[0]),
    .Y(_0303_)
  );
  NOT _0730_ (
    .A(_0293_),
    .Y(_0304_)
  );
  NAND _0731_ (
    .A(_0304_),
    .B(fromFifo_toPS[0]),
    .Y(_0305_)
  );
  NAND _0732_ (
    .A(_0305_),
    .B(_0303_),
    .Y(_0014_[0])
  );
  NAND _0733_ (
    .A(_0025_),
    .B(toPS_fromFifo[1]),
    .Y(_0306_)
  );
  NAND _0734_ (
    .A(_0304_),
    .B(fromFifo_toPS[1]),
    .Y(_0307_)
  );
  NAND _0735_ (
    .A(_0307_),
    .B(_0306_),
    .Y(_0014_[1])
  );
  NAND _0736_ (
    .A(_0025_),
    .B(toPS_fromFifo[2]),
    .Y(_0308_)
  );
  NAND _0737_ (
    .A(_0304_),
    .B(fromFifo_toPS[2]),
    .Y(_0309_)
  );
  NAND _0738_ (
    .A(_0309_),
    .B(_0308_),
    .Y(_0014_[2])
  );
  NAND _0739_ (
    .A(_0025_),
    .B(toPS_fromFifo[3]),
    .Y(_0310_)
  );
  NAND _0740_ (
    .A(_0304_),
    .B(fromFifo_toPS[3]),
    .Y(_0311_)
  );
  NAND _0741_ (
    .A(_0311_),
    .B(_0310_),
    .Y(_0014_[3])
  );
  NAND _0742_ (
    .A(_0025_),
    .B(toPS_fromFifo[4]),
    .Y(_0312_)
  );
  NAND _0743_ (
    .A(_0304_),
    .B(fromFifo_toPS[4]),
    .Y(_0313_)
  );
  NAND _0744_ (
    .A(_0313_),
    .B(_0312_),
    .Y(_0014_[4])
  );
  NAND _0745_ (
    .A(_0025_),
    .B(toPS_fromFifo[5]),
    .Y(_0314_)
  );
  NAND _0746_ (
    .A(_0304_),
    .B(fromFifo_toPS[5]),
    .Y(_0315_)
  );
  NAND _0747_ (
    .A(_0315_),
    .B(_0314_),
    .Y(_0014_[5])
  );
  NAND _0748_ (
    .A(_0025_),
    .B(toPS_fromFifo[6]),
    .Y(_0316_)
  );
  NAND _0749_ (
    .A(_0304_),
    .B(fromFifo_toPS[6]),
    .Y(_0317_)
  );
  NAND _0750_ (
    .A(_0317_),
    .B(_0316_),
    .Y(_0014_[6])
  );
  NAND _0751_ (
    .A(_0025_),
    .B(toPS_fromFifo[7]),
    .Y(_0318_)
  );
  NAND _0752_ (
    .A(_0304_),
    .B(fromFifo_toPS[7]),
    .Y(_0319_)
  );
  NAND _0753_ (
    .A(_0319_),
    .B(_0318_),
    .Y(_0014_[7])
  );
  NAND _0754_ (
    .A(_0025_),
    .B(toPS_fromFifo[8]),
    .Y(_0320_)
  );
  NAND _0755_ (
    .A(_0304_),
    .B(fromFifo_toPS[8]),
    .Y(_0321_)
  );
  NAND _0756_ (
    .A(_0321_),
    .B(_0320_),
    .Y(_0014_[8])
  );
  NAND _0757_ (
    .A(_0025_),
    .B(toPS_fromFifo[9]),
    .Y(_0322_)
  );
  NAND _0758_ (
    .A(_0304_),
    .B(fromFifo_toPS[9]),
    .Y(_0323_)
  );
  NAND _0759_ (
    .A(_0323_),
    .B(_0322_),
    .Y(_0014_[9])
  );
  NAND _0760_ (
    .A(_0025_),
    .B(toPS_fromFifo[10]),
    .Y(_0324_)
  );
  NAND _0761_ (
    .A(_0304_),
    .B(fromFifo_toPS[10]),
    .Y(_0325_)
  );
  NAND _0762_ (
    .A(_0325_),
    .B(_0324_),
    .Y(_0014_[10])
  );
  NAND _0763_ (
    .A(_0025_),
    .B(toPS_fromFifo[11]),
    .Y(_0326_)
  );
  NAND _0764_ (
    .A(_0304_),
    .B(fromFifo_toPS[11]),
    .Y(_0327_)
  );
  NAND _0765_ (
    .A(_0327_),
    .B(_0326_),
    .Y(_0014_[11])
  );
  NAND _0766_ (
    .A(_0025_),
    .B(toPS_fromFifo[12]),
    .Y(_0328_)
  );
  NAND _0767_ (
    .A(_0304_),
    .B(fromFifo_toPS[12]),
    .Y(_0329_)
  );
  NAND _0768_ (
    .A(_0329_),
    .B(_0328_),
    .Y(_0014_[12])
  );
  NAND _0769_ (
    .A(_0025_),
    .B(toPS_fromFifo[13]),
    .Y(_0330_)
  );
  NAND _0770_ (
    .A(_0304_),
    .B(fromFifo_toPS[13]),
    .Y(_0331_)
  );
  NAND _0771_ (
    .A(_0331_),
    .B(_0330_),
    .Y(_0014_[13])
  );
  NAND _0772_ (
    .A(_0025_),
    .B(toPS_fromFifo[14]),
    .Y(_0332_)
  );
  NAND _0773_ (
    .A(_0304_),
    .B(fromFifo_toPS[14]),
    .Y(_0333_)
  );
  NAND _0774_ (
    .A(_0333_),
    .B(_0332_),
    .Y(_0014_[14])
  );
  NAND _0775_ (
    .A(_0025_),
    .B(toPS_fromFifo[15]),
    .Y(_0335_)
  );
  NAND _0776_ (
    .A(_0304_),
    .B(fromFifo_toPS[15]),
    .Y(_0336_)
  );
  NAND _0777_ (
    .A(_0336_),
    .B(_0335_),
    .Y(_0014_[15])
  );
  NAND _0778_ (
    .A(_0025_),
    .B(toPS_fromFifo[16]),
    .Y(_0337_)
  );
  NAND _0779_ (
    .A(_0304_),
    .B(fromFifo_toPS[16]),
    .Y(_0338_)
  );
  NAND _0780_ (
    .A(_0338_),
    .B(_0337_),
    .Y(_0014_[16])
  );
  NAND _0781_ (
    .A(_0025_),
    .B(toPS_fromFifo[17]),
    .Y(_0339_)
  );
  NAND _0782_ (
    .A(_0304_),
    .B(fromFifo_toPS[17]),
    .Y(_0340_)
  );
  NAND _0783_ (
    .A(_0340_),
    .B(_0339_),
    .Y(_0014_[17])
  );
  NAND _0784_ (
    .A(_0025_),
    .B(toPS_fromFifo[18]),
    .Y(_0341_)
  );
  NAND _0785_ (
    .A(_0304_),
    .B(fromFifo_toPS[18]),
    .Y(_0342_)
  );
  NAND _0786_ (
    .A(_0342_),
    .B(_0341_),
    .Y(_0014_[18])
  );
  NAND _0787_ (
    .A(_0025_),
    .B(toPS_fromFifo[19]),
    .Y(_0343_)
  );
  NAND _0788_ (
    .A(_0304_),
    .B(fromFifo_toPS[19]),
    .Y(_0344_)
  );
  NAND _0789_ (
    .A(_0344_),
    .B(_0343_),
    .Y(_0014_[19])
  );
  NAND _0790_ (
    .A(_0025_),
    .B(toPS_fromFifo[20]),
    .Y(_0345_)
  );
  NAND _0791_ (
    .A(_0304_),
    .B(fromFifo_toPS[20]),
    .Y(_0346_)
  );
  NAND _0792_ (
    .A(_0346_),
    .B(_0345_),
    .Y(_0014_[20])
  );
  NAND _0793_ (
    .A(_0025_),
    .B(toPS_fromFifo[21]),
    .Y(_0347_)
  );
  NAND _0794_ (
    .A(_0304_),
    .B(fromFifo_toPS[21]),
    .Y(_0348_)
  );
  NAND _0795_ (
    .A(_0348_),
    .B(_0347_),
    .Y(_0014_[21])
  );
  NAND _0796_ (
    .A(_0025_),
    .B(toPS_fromFifo[22]),
    .Y(_0349_)
  );
  NAND _0797_ (
    .A(_0304_),
    .B(fromFifo_toPS[22]),
    .Y(_0350_)
  );
  NAND _0798_ (
    .A(_0350_),
    .B(_0349_),
    .Y(_0014_[22])
  );
  NAND _0799_ (
    .A(_0025_),
    .B(toPS_fromFifo[23]),
    .Y(_0351_)
  );
  NAND _0800_ (
    .A(_0304_),
    .B(fromFifo_toPS[23]),
    .Y(_0352_)
  );
  NAND _0801_ (
    .A(_0352_),
    .B(_0351_),
    .Y(_0014_[23])
  );
  NAND _0802_ (
    .A(_0025_),
    .B(toPS_fromFifo[24]),
    .Y(_0353_)
  );
  NAND _0803_ (
    .A(_0304_),
    .B(fromFifo_toPS[24]),
    .Y(_0354_)
  );
  NAND _0804_ (
    .A(_0354_),
    .B(_0353_),
    .Y(_0014_[24])
  );
  NAND _0805_ (
    .A(_0025_),
    .B(toPS_fromFifo[25]),
    .Y(_0355_)
  );
  NAND _0806_ (
    .A(_0304_),
    .B(fromFifo_toPS[25]),
    .Y(_0356_)
  );
  NAND _0807_ (
    .A(_0356_),
    .B(_0355_),
    .Y(_0014_[25])
  );
  NAND _0808_ (
    .A(_0025_),
    .B(toPS_fromFifo[26]),
    .Y(_0357_)
  );
  NAND _0809_ (
    .A(_0304_),
    .B(fromFifo_toPS[26]),
    .Y(_0358_)
  );
  NAND _0810_ (
    .A(_0358_),
    .B(_0357_),
    .Y(_0014_[26])
  );
  NAND _0811_ (
    .A(_0025_),
    .B(toPS_fromFifo[27]),
    .Y(_0359_)
  );
  NAND _0812_ (
    .A(_0304_),
    .B(fromFifo_toPS[27]),
    .Y(_0360_)
  );
  NAND _0813_ (
    .A(_0360_),
    .B(_0359_),
    .Y(_0014_[27])
  );
  NAND _0814_ (
    .A(_0025_),
    .B(toPS_fromFifo[28]),
    .Y(_0361_)
  );
  NAND _0815_ (
    .A(_0304_),
    .B(fromFifo_toPS[28]),
    .Y(_0362_)
  );
  NAND _0816_ (
    .A(_0362_),
    .B(_0361_),
    .Y(_0014_[28])
  );
  NAND _0817_ (
    .A(_0025_),
    .B(toPS_fromFifo[29]),
    .Y(_0363_)
  );
  NAND _0818_ (
    .A(_0304_),
    .B(fromFifo_toPS[29]),
    .Y(_0364_)
  );
  NAND _0819_ (
    .A(_0364_),
    .B(_0363_),
    .Y(_0014_[29])
  );
  NAND _0820_ (
    .A(_0025_),
    .B(toPS_fromFifo[30]),
    .Y(_0365_)
  );
  NAND _0821_ (
    .A(_0304_),
    .B(fromFifo_toPS[30]),
    .Y(_0366_)
  );
  NAND _0822_ (
    .A(_0366_),
    .B(_0365_),
    .Y(_0014_[30])
  );
  NAND _0823_ (
    .A(_0025_),
    .B(toPS_fromFifo[31]),
    .Y(_0367_)
  );
  NAND _0824_ (
    .A(_0304_),
    .B(fromFifo_toPS[31]),
    .Y(_0368_)
  );
  NAND _0825_ (
    .A(_0368_),
    .B(_0367_),
    .Y(_0014_[31])
  );
  NOT _0826_ (
    .A(SP_fifo[0]),
    .Y(_0369_)
  );
  NOT _0827_ (
    .A(_0294_),
    .Y(_0370_)
  );
  NOR _0828_ (
    .A(_0370_),
    .B(_0369_),
    .Y(_0005_[0])
  );
  NOT _0829_ (
    .A(SP_fifo[1]),
    .Y(_0371_)
  );
  NOR _0830_ (
    .A(_0370_),
    .B(_0371_),
    .Y(_0005_[1])
  );
  NOT _0831_ (
    .A(SP_fifo[2]),
    .Y(_0372_)
  );
  NOR _0832_ (
    .A(_0370_),
    .B(_0372_),
    .Y(_0005_[2])
  );
  NOT _0833_ (
    .A(SP_fifo[3]),
    .Y(_0373_)
  );
  NOR _0834_ (
    .A(_0370_),
    .B(_0373_),
    .Y(_0005_[3])
  );
  NOT _0835_ (
    .A(SP_fifo[4]),
    .Y(_0374_)
  );
  NOR _0836_ (
    .A(_0370_),
    .B(_0374_),
    .Y(_0005_[4])
  );
  NOT _0837_ (
    .A(SP_fifo[5]),
    .Y(_0375_)
  );
  NOR _0838_ (
    .A(_0370_),
    .B(_0375_),
    .Y(_0005_[5])
  );
  NOT _0839_ (
    .A(SP_fifo[6]),
    .Y(_0376_)
  );
  NOR _0840_ (
    .A(_0370_),
    .B(_0376_),
    .Y(_0005_[6])
  );
  NOT _0841_ (
    .A(SP_fifo[7]),
    .Y(_0377_)
  );
  NOR _0842_ (
    .A(_0370_),
    .B(_0377_),
    .Y(_0005_[7])
  );
  NOT _0843_ (
    .A(SP_fifo[8]),
    .Y(_0378_)
  );
  NOR _0844_ (
    .A(_0370_),
    .B(_0378_),
    .Y(_0005_[8])
  );
  NOT _0845_ (
    .A(SP_fifo[9]),
    .Y(_0379_)
  );
  NOR _0846_ (
    .A(_0370_),
    .B(_0379_),
    .Y(_0005_[9])
  );
  NOT _0847_ (
    .A(SP_fifo[10]),
    .Y(_0380_)
  );
  NOR _0848_ (
    .A(_0370_),
    .B(_0380_),
    .Y(_0005_[10])
  );
  NOT _0849_ (
    .A(SP_fifo[11]),
    .Y(_0381_)
  );
  NOR _0850_ (
    .A(_0370_),
    .B(_0381_),
    .Y(_0005_[11])
  );
  NOT _0851_ (
    .A(SP_fifo[12]),
    .Y(_0382_)
  );
  NOR _0852_ (
    .A(_0370_),
    .B(_0382_),
    .Y(_0005_[12])
  );
  NOT _0853_ (
    .A(SP_fifo[13]),
    .Y(_0383_)
  );
  NOR _0854_ (
    .A(_0370_),
    .B(_0383_),
    .Y(_0005_[13])
  );
  NOT _0855_ (
    .A(SP_fifo[14]),
    .Y(_0384_)
  );
  NOR _0856_ (
    .A(_0370_),
    .B(_0384_),
    .Y(_0005_[14])
  );
  NOT _0857_ (
    .A(SP_fifo[15]),
    .Y(_0385_)
  );
  NOR _0858_ (
    .A(_0370_),
    .B(_0385_),
    .Y(_0005_[15])
  );
  NOT _0859_ (
    .A(SP_fifo[16]),
    .Y(_0386_)
  );
  NOR _0860_ (
    .A(_0370_),
    .B(_0386_),
    .Y(_0005_[16])
  );
  NOT _0861_ (
    .A(SP_fifo[17]),
    .Y(_0387_)
  );
  NOR _0862_ (
    .A(_0370_),
    .B(_0387_),
    .Y(_0005_[17])
  );
  NOT _0863_ (
    .A(SP_fifo[18]),
    .Y(_0388_)
  );
  NOR _0864_ (
    .A(_0370_),
    .B(_0388_),
    .Y(_0005_[18])
  );
  NOT _0865_ (
    .A(SP_fifo[19]),
    .Y(_0389_)
  );
  NOR _0866_ (
    .A(_0370_),
    .B(_0389_),
    .Y(_0005_[19])
  );
  NOT _0867_ (
    .A(SP_fifo[20]),
    .Y(_0390_)
  );
  NOR _0868_ (
    .A(_0370_),
    .B(_0390_),
    .Y(_0005_[20])
  );
  NOT _0869_ (
    .A(SP_fifo[21]),
    .Y(_0391_)
  );
  NOR _0870_ (
    .A(_0370_),
    .B(_0391_),
    .Y(_0005_[21])
  );
  NOT _0871_ (
    .A(SP_fifo[22]),
    .Y(_0392_)
  );
  NOR _0872_ (
    .A(_0370_),
    .B(_0392_),
    .Y(_0005_[22])
  );
  NOT _0873_ (
    .A(SP_fifo[23]),
    .Y(_0393_)
  );
  NOR _0874_ (
    .A(_0370_),
    .B(_0393_),
    .Y(_0005_[23])
  );
  NOT _0875_ (
    .A(SP_fifo[24]),
    .Y(_0394_)
  );
  NOR _0876_ (
    .A(_0370_),
    .B(_0394_),
    .Y(_0005_[24])
  );
  NOT _0877_ (
    .A(SP_fifo[25]),
    .Y(_0395_)
  );
  NOR _0878_ (
    .A(_0370_),
    .B(_0395_),
    .Y(_0005_[25])
  );
  NOT _0879_ (
    .A(SP_fifo[26]),
    .Y(_0396_)
  );
  NOR _0880_ (
    .A(_0370_),
    .B(_0396_),
    .Y(_0005_[26])
  );
  NOT _0881_ (
    .A(SP_fifo[27]),
    .Y(_0397_)
  );
  NOR _0882_ (
    .A(_0370_),
    .B(_0397_),
    .Y(_0005_[27])
  );
  NOT _0883_ (
    .A(SP_fifo[28]),
    .Y(_0398_)
  );
  NOR _0884_ (
    .A(_0370_),
    .B(_0398_),
    .Y(_0005_[28])
  );
  NOT _0885_ (
    .A(SP_fifo[29]),
    .Y(_0399_)
  );
  NOR _0886_ (
    .A(_0370_),
    .B(_0399_),
    .Y(_0005_[29])
  );
  NOT _0887_ (
    .A(SP_fifo[30]),
    .Y(_0400_)
  );
  NOR _0888_ (
    .A(_0370_),
    .B(_0400_),
    .Y(_0005_[30])
  );
  NOT _0889_ (
    .A(SP_fifo[31]),
    .Y(_0401_)
  );
  NOR _0890_ (
    .A(_0370_),
    .B(_0401_),
    .Y(_0005_[31])
  );
  NOR _0891_ (
    .A(_0300_),
    .B(_0027_),
    .Y(_0402_)
  );
  NAND _0892_ (
    .A(_0402_),
    .B(_0018_),
    .Y(_0007_)
  );
  NOT _0893_ (
    .A(_0402_),
    .Y(_0003_)
  );
  NOT _0894_ (
    .A(timeOutFail),
    .Y(_0403_)
  );
  NOR _0895_ (
    .A(_0153_),
    .B(_0403_),
    .Y(_0404_)
  );
  NOR _0896_ (
    .A(_0404_),
    .B(_0230_),
    .Y(_0405_)
  );
  NOR _0897_ (
    .A(_0405_),
    .B(_0026_),
    .Y(_0013_)
  );
  NOT _0898_ (
    .A(push),
    .Y(_0406_)
  );
  NOR _0899_ (
    .A(_0406_),
    .B(_0038_),
    .Y(_0407_)
  );
  NOR _0900_ (
    .A(_0407_),
    .B(state[2]),
    .Y(_0408_)
  );
  NOR _0901_ (
    .A(_0408_),
    .B(reset),
    .Y(_0009_)
  );
  NOT _0902_ (
    .A(pop),
    .Y(_0409_)
  );
  NOR _0903_ (
    .A(state[4]),
    .B(state[1]),
    .Y(_0410_)
  );
  NOR _0904_ (
    .A(_0410_),
    .B(_0409_),
    .Y(_0411_)
  );
  NOT _0905_ (
    .A(_0023_),
    .Y(_0412_)
  );
  NOR _0906_ (
    .A(_0412_),
    .B(_0152_),
    .Y(_0413_)
  );
  NOR _0907_ (
    .A(_0413_),
    .B(_0411_),
    .Y(_0414_)
  );
  NOR _0908_ (
    .A(_0414_),
    .B(reset),
    .Y(_0008_)
  );
  NOR _0909_ (
    .A(_0023_),
    .B(state[1]),
    .Y(_0415_)
  );
  NOR _0910_ (
    .A(_0415_),
    .B(reset),
    .Y(_0016_)
  );
  NOT _0911_ (
    .A(_0292_),
    .Y(_0416_)
  );
  NAND _0912_ (
    .A(_0301_),
    .B(_0416_),
    .Y(_0010_)
  );
  NOT _0913_ (
    .A(_0032_),
    .Y(_0417_)
  );
  NOR _0914_ (
    .A(_0417_),
    .B(_0022_),
    .Y(_0286_)
  );
  NAND _0915_ (
    .A(_0000_),
    .B(writeRead_control),
    .Y(_0418_)
  );
  NOR _0916_ (
    .A(_0418_),
    .B(_0035_),
    .Y(_0288_)
  );
  NOR _0917_ (
    .A(_0284_),
    .B(reset),
    .Y(_0289_)
  );
  DFF _0918_ (
    .C(SDclock),
    .D(reset),
    .Q(state[0])
  );
  DFF _0919_ (
    .C(SDclock),
    .D(_0096_),
    .Q(state[1])
  );
  DFF _0920_ (
    .C(SDclock),
    .D(_0286_),
    .Q(state[2])
  );
  DFF _0921_ (
    .C(SDclock),
    .D(_0282_),
    .Q(state[3])
  );
  DFF _0922_ (
    .C(SDclock),
    .D(_0156_),
    .Q(state[4])
  );
  DFF _0923_ (
    .C(SDclock),
    .D(_0065_),
    .Q(state[5])
  );
  DFF _0924_ (
    .C(SDclock),
    .D(_0289_),
    .Q(state[6])
  );
  DFF _0925_ (
    .C(SDclock),
    .D(_0288_),
    .Q(state[7])
  );
  DFF _0926_ (
    .C(SDclock),
    .D(_0334_),
    .Q(state[8])
  );
  DFF _0927_ (
    .C(SDclock),
    .D(_0010_),
    .Q(recibido)
  );
  DFF _0928_ (
    .C(SDclock),
    .D(_0016_),
    .Q(transferComplete)
  );
  DFF _0929_ (
    .C(SDclock),
    .D(_0008_),
    .Q(pop)
  );
  DFF _0930_ (
    .C(SDclock),
    .D(_0009_),
    .Q(push)
  );
  DFF _0931_ (
    .C(SDclock),
    .D(_0000_),
    .Q(IDLE_out_control)
  );
  DFF _0932_ (
    .C(SDclock),
    .D(_0013_),
    .Q(timeOutFail)
  );
  DFF _0933_ (
    .C(SDclock),
    .D(_0006_),
    .Q(loadsend)
  );
  DFF _0934_ (
    .C(SDclock),
    .D(_0002_),
    .Q(enable_PS)
  );
  DFF _0935_ (
    .C(SDclock),
    .D(_0003_),
    .Q(enable_SP)
  );
  DFF _0936_ (
    .C(SDclock),
    .D(_0007_),
    .Q(padEnable)
  );
  DFF _0937_ (
    .C(SDclock),
    .D(_0005_[0]),
    .Q(fromSP_toFifo[0])
  );
  DFF _0938_ (
    .C(SDclock),
    .D(_0005_[1]),
    .Q(fromSP_toFifo[1])
  );
  DFF _0939_ (
    .C(SDclock),
    .D(_0005_[2]),
    .Q(fromSP_toFifo[2])
  );
  DFF _0940_ (
    .C(SDclock),
    .D(_0005_[3]),
    .Q(fromSP_toFifo[3])
  );
  DFF _0941_ (
    .C(SDclock),
    .D(_0005_[4]),
    .Q(fromSP_toFifo[4])
  );
  DFF _0942_ (
    .C(SDclock),
    .D(_0005_[5]),
    .Q(fromSP_toFifo[5])
  );
  DFF _0943_ (
    .C(SDclock),
    .D(_0005_[6]),
    .Q(fromSP_toFifo[6])
  );
  DFF _0944_ (
    .C(SDclock),
    .D(_0005_[7]),
    .Q(fromSP_toFifo[7])
  );
  DFF _0945_ (
    .C(SDclock),
    .D(_0005_[8]),
    .Q(fromSP_toFifo[8])
  );
  DFF _0946_ (
    .C(SDclock),
    .D(_0005_[9]),
    .Q(fromSP_toFifo[9])
  );
  DFF _0947_ (
    .C(SDclock),
    .D(_0005_[10]),
    .Q(fromSP_toFifo[10])
  );
  DFF _0948_ (
    .C(SDclock),
    .D(_0005_[11]),
    .Q(fromSP_toFifo[11])
  );
  DFF _0949_ (
    .C(SDclock),
    .D(_0005_[12]),
    .Q(fromSP_toFifo[12])
  );
  DFF _0950_ (
    .C(SDclock),
    .D(_0005_[13]),
    .Q(fromSP_toFifo[13])
  );
  DFF _0951_ (
    .C(SDclock),
    .D(_0005_[14]),
    .Q(fromSP_toFifo[14])
  );
  DFF _0952_ (
    .C(SDclock),
    .D(_0005_[15]),
    .Q(fromSP_toFifo[15])
  );
  DFF _0953_ (
    .C(SDclock),
    .D(_0005_[16]),
    .Q(fromSP_toFifo[16])
  );
  DFF _0954_ (
    .C(SDclock),
    .D(_0005_[17]),
    .Q(fromSP_toFifo[17])
  );
  DFF _0955_ (
    .C(SDclock),
    .D(_0005_[18]),
    .Q(fromSP_toFifo[18])
  );
  DFF _0956_ (
    .C(SDclock),
    .D(_0005_[19]),
    .Q(fromSP_toFifo[19])
  );
  DFF _0957_ (
    .C(SDclock),
    .D(_0005_[20]),
    .Q(fromSP_toFifo[20])
  );
  DFF _0958_ (
    .C(SDclock),
    .D(_0005_[21]),
    .Q(fromSP_toFifo[21])
  );
  DFF _0959_ (
    .C(SDclock),
    .D(_0005_[22]),
    .Q(fromSP_toFifo[22])
  );
  DFF _0960_ (
    .C(SDclock),
    .D(_0005_[23]),
    .Q(fromSP_toFifo[23])
  );
  DFF _0961_ (
    .C(SDclock),
    .D(_0005_[24]),
    .Q(fromSP_toFifo[24])
  );
  DFF _0962_ (
    .C(SDclock),
    .D(_0005_[25]),
    .Q(fromSP_toFifo[25])
  );
  DFF _0963_ (
    .C(SDclock),
    .D(_0005_[26]),
    .Q(fromSP_toFifo[26])
  );
  DFF _0964_ (
    .C(SDclock),
    .D(_0005_[27]),
    .Q(fromSP_toFifo[27])
  );
  DFF _0965_ (
    .C(SDclock),
    .D(_0005_[28]),
    .Q(fromSP_toFifo[28])
  );
  DFF _0966_ (
    .C(SDclock),
    .D(_0005_[29]),
    .Q(fromSP_toFifo[29])
  );
  DFF _0967_ (
    .C(SDclock),
    .D(_0005_[30]),
    .Q(fromSP_toFifo[30])
  );
  DFF _0968_ (
    .C(SDclock),
    .D(_0005_[31]),
    .Q(fromSP_toFifo[31])
  );
  DFF _0969_ (
    .C(SDclock),
    .D(_0014_[0]),
    .Q(toPS_fromFifo[0])
  );
  DFF _0970_ (
    .C(SDclock),
    .D(_0014_[1]),
    .Q(toPS_fromFifo[1])
  );
  DFF _0971_ (
    .C(SDclock),
    .D(_0014_[2]),
    .Q(toPS_fromFifo[2])
  );
  DFF _0972_ (
    .C(SDclock),
    .D(_0014_[3]),
    .Q(toPS_fromFifo[3])
  );
  DFF _0973_ (
    .C(SDclock),
    .D(_0014_[4]),
    .Q(toPS_fromFifo[4])
  );
  DFF _0974_ (
    .C(SDclock),
    .D(_0014_[5]),
    .Q(toPS_fromFifo[5])
  );
  DFF _0975_ (
    .C(SDclock),
    .D(_0014_[6]),
    .Q(toPS_fromFifo[6])
  );
  DFF _0976_ (
    .C(SDclock),
    .D(_0014_[7]),
    .Q(toPS_fromFifo[7])
  );
  DFF _0977_ (
    .C(SDclock),
    .D(_0014_[8]),
    .Q(toPS_fromFifo[8])
  );
  DFF _0978_ (
    .C(SDclock),
    .D(_0014_[9]),
    .Q(toPS_fromFifo[9])
  );
  DFF _0979_ (
    .C(SDclock),
    .D(_0014_[10]),
    .Q(toPS_fromFifo[10])
  );
  DFF _0980_ (
    .C(SDclock),
    .D(_0014_[11]),
    .Q(toPS_fromFifo[11])
  );
  DFF _0981_ (
    .C(SDclock),
    .D(_0014_[12]),
    .Q(toPS_fromFifo[12])
  );
  DFF _0982_ (
    .C(SDclock),
    .D(_0014_[13]),
    .Q(toPS_fromFifo[13])
  );
  DFF _0983_ (
    .C(SDclock),
    .D(_0014_[14]),
    .Q(toPS_fromFifo[14])
  );
  DFF _0984_ (
    .C(SDclock),
    .D(_0014_[15]),
    .Q(toPS_fromFifo[15])
  );
  DFF _0985_ (
    .C(SDclock),
    .D(_0014_[16]),
    .Q(toPS_fromFifo[16])
  );
  DFF _0986_ (
    .C(SDclock),
    .D(_0014_[17]),
    .Q(toPS_fromFifo[17])
  );
  DFF _0987_ (
    .C(SDclock),
    .D(_0014_[18]),
    .Q(toPS_fromFifo[18])
  );
  DFF _0988_ (
    .C(SDclock),
    .D(_0014_[19]),
    .Q(toPS_fromFifo[19])
  );
  DFF _0989_ (
    .C(SDclock),
    .D(_0014_[20]),
    .Q(toPS_fromFifo[20])
  );
  DFF _0990_ (
    .C(SDclock),
    .D(_0014_[21]),
    .Q(toPS_fromFifo[21])
  );
  DFF _0991_ (
    .C(SDclock),
    .D(_0014_[22]),
    .Q(toPS_fromFifo[22])
  );
  DFF _0992_ (
    .C(SDclock),
    .D(_0014_[23]),
    .Q(toPS_fromFifo[23])
  );
  DFF _0993_ (
    .C(SDclock),
    .D(_0014_[24]),
    .Q(toPS_fromFifo[24])
  );
  DFF _0994_ (
    .C(SDclock),
    .D(_0014_[25]),
    .Q(toPS_fromFifo[25])
  );
  DFF _0995_ (
    .C(SDclock),
    .D(_0014_[26]),
    .Q(toPS_fromFifo[26])
  );
  DFF _0996_ (
    .C(SDclock),
    .D(_0014_[27]),
    .Q(toPS_fromFifo[27])
  );
  DFF _0997_ (
    .C(SDclock),
    .D(_0014_[28]),
    .Q(toPS_fromFifo[28])
  );
  DFF _0998_ (
    .C(SDclock),
    .D(_0014_[29]),
    .Q(toPS_fromFifo[29])
  );
  DFF _0999_ (
    .C(SDclock),
    .D(_0014_[30]),
    .Q(toPS_fromFifo[30])
  );
  DFF _1000_ (
    .C(SDclock),
    .D(_0014_[31]),
    .Q(toPS_fromFifo[31])
  );
  DFF _1001_ (
    .C(SDclock),
    .D(_0015_),
    .Q(toSD_PS)
  );
  DFF _1002_ (
    .C(SDclock),
    .D(_0012_[0]),
    .Q(timeCount[0])
  );
  DFF _1003_ (
    .C(SDclock),
    .D(_0012_[1]),
    .Q(timeCount[1])
  );
  DFF _1004_ (
    .C(SDclock),
    .D(_0012_[2]),
    .Q(timeCount[2])
  );
  DFF _1005_ (
    .C(SDclock),
    .D(_0012_[3]),
    .Q(timeCount[3])
  );
  DFF _1006_ (
    .C(SDclock),
    .D(_0012_[4]),
    .Q(timeCount[4])
  );
  DFF _1007_ (
    .C(SDclock),
    .D(_0012_[5]),
    .Q(timeCount[5])
  );
  DFF _1008_ (
    .C(SDclock),
    .D(_0012_[6]),
    .Q(timeCount[6])
  );
  DFF _1009_ (
    .C(SDclock),
    .D(_0012_[7]),
    .Q(timeCount[7])
  );
  DFF _1010_ (
    .C(SDclock),
    .D(_0012_[8]),
    .Q(timeCount[8])
  );
  DFF _1011_ (
    .C(SDclock),
    .D(_0012_[9]),
    .Q(timeCount[9])
  );
  DFF _1012_ (
    .C(SDclock),
    .D(_0012_[10]),
    .Q(timeCount[10])
  );
  DFF _1013_ (
    .C(SDclock),
    .D(_0012_[11]),
    .Q(timeCount[11])
  );
  DFF _1014_ (
    .C(SDclock),
    .D(_0012_[12]),
    .Q(timeCount[12])
  );
  DFF _1015_ (
    .C(SDclock),
    .D(_0012_[13]),
    .Q(timeCount[13])
  );
  DFF _1016_ (
    .C(SDclock),
    .D(_0012_[14]),
    .Q(timeCount[14])
  );
  DFF _1017_ (
    .C(SDclock),
    .D(_0012_[15]),
    .Q(timeCount[15])
  );
  DFF _1018_ (
    .C(SDclock),
    .D(_0011_),
    .Q(serializerReset)
  );
  DFF _1019_ (
    .C(SDclock),
    .D(_0004_[0]),
    .Q(framesize[0])
  );
  DFF _1020_ (
    .C(SDclock),
    .D(_0004_[3]),
    .Q(framesize[3])
  );
  DFF _1021_ (
    .C(SDclock),
    .D(_0004_[5]),
    .Q(framesize[5])
  );
  DFF _1022_ (
    .C(SDclock),
    .D(_0004_[7]),
    .Q(framesize[7])
  );
  DFF _1023_ (
    .C(SDclock),
    .D(_0001_),
    .Q(deserializerReset)
  );
  (* src = "capa_fisica.v:75" *)
  serializer PS (
    .clk(SDclock),
    .complete(transmision_SD),
    .enable(enable_PS),
    .in(toPS_fromFifo),
    .out(wireSD_PS),
    .reset(serializerReset)
  );
  (* src = "capa_fisica.v:74" *)
  deserializer SP (
    .clk(SDclock),
    .complete(reception_SD),
    .enable(enable_SP),
    .framesize({ framesize[7], 1'b0, framesize[5], 1'b0, framesize[3], 2'b00, framesize[0] }),
    .in(fromSD_SP),
    .out(SP_fifo),
    .reset(deserializerReset)
  );
  assign { framesize[6], framesize[4], framesize[2:1] } = 4'b0000;
  assign padState = enable_PS;
endmodule

(* src = "control_DAT.v:13" *)
module control_DAT(writeRead, multiblock, timeoutenable, timeout, newService, clock, reset, blockSize, IDLE_in, fifo_full, recibido, transferComplete, newService_fisica, timeout_fisica, writeRead_fisica, reset_fisica, complete, IDLE_out);
  (* src = "control_DAT.v:56" *)
  wire _000_;
  (* src = "control_DAT.v:56" *)
  wire _001_;
  (* src = "control_DAT.v:56" *)
  wire _002_;
  (* src = "control_DAT.v:56" *)
  wire [15:0] _003_;
  (* src = "control_DAT.v:56" *)
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  (* src = "control_DAT.v:21" *)
  input IDLE_in;
  (* src = "control_DAT.v:30" *)
  output IDLE_out;
  (* src = "control_DAT.v:20" *)
  input [3:0] blockSize;
  (* src = "control_DAT.v:18" *)
  input clock;
  (* src = "control_DAT.v:29" *)
  output complete;
  (* src = "control_DAT.v:22" *)
  input fifo_full;
  (* src = "control_DAT.v:14" *)
  input multiblock;
  (* src = "control_DAT.v:17" *)
  input newService;
  (* src = "control_DAT.v:25" *)
  output newService_fisica;
  (* src = "control_DAT.v:23" *)
  input recibido;
  (* src = "control_DAT.v:19" *)
  input reset;
  (* src = "control_DAT.v:28" *)
  output reset_fisica;
  (* onehot = 32'd1 *)
  wire [5:0] state;
  (* src = "control_DAT.v:16" *)
  input [15:0] timeout;
  (* src = "control_DAT.v:26" *)
  output [15:0] timeout_fisica;
  (* src = "control_DAT.v:15" *)
  input timeoutenable;
  (* src = "control_DAT.v:24" *)
  input transferComplete;
  (* src = "control_DAT.v:13" *)
  input writeRead;
  (* src = "control_DAT.v:27" *)
  output writeRead_fisica;
  NOT _128_ (
    .A(transferComplete),
    .Y(_112_)
  );
  NOT _129_ (
    .A(state[2]),
    .Y(_113_)
  );
  NOR _130_ (
    .A(_113_),
    .B(reset),
    .Y(_114_)
  );
  NAND _131_ (
    .A(_114_),
    .B(_112_),
    .Y(_115_)
  );
  NOT _132_ (
    .A(state[3]),
    .Y(_116_)
  );
  NOR _133_ (
    .A(_116_),
    .B(reset),
    .Y(_002_)
  );
  NAND _134_ (
    .A(_002_),
    .B(recibido),
    .Y(_117_)
  );
  NAND _135_ (
    .A(_117_),
    .B(_115_),
    .Y(_111_)
  );
  NAND _136_ (
    .A(_114_),
    .B(transferComplete),
    .Y(_118_)
  );
  NOT _137_ (
    .A(IDLE_in),
    .Y(_119_)
  );
  NOT _138_ (
    .A(state[1]),
    .Y(_120_)
  );
  NOR _139_ (
    .A(reset),
    .B(_120_),
    .Y(_001_)
  );
  NAND _140_ (
    .A(_001_),
    .B(_119_),
    .Y(_121_)
  );
  NAND _141_ (
    .A(_121_),
    .B(_118_),
    .Y(_014_)
  );
  NOT _142_ (
    .A(reset),
    .Y(_122_)
  );
  NAND _143_ (
    .A(state[0]),
    .B(_119_),
    .Y(_123_)
  );
  NAND _144_ (
    .A(_123_),
    .B(_122_),
    .Y(_098_)
  );
  NOT _145_ (
    .A(newService),
    .Y(_124_)
  );
  NOT _146_ (
    .A(state[5]),
    .Y(_125_)
  );
  NOR _147_ (
    .A(_125_),
    .B(reset),
    .Y(_000_)
  );
  NAND _148_ (
    .A(_000_),
    .B(_124_),
    .Y(_126_)
  );
  NOR _149_ (
    .A(_119_),
    .B(reset),
    .Y(_127_)
  );
  NOT _150_ (
    .A(state[0]),
    .Y(_005_)
  );
  NOT _151_ (
    .A(multiblock),
    .Y(_006_)
  );
  NAND _152_ (
    .A(_006_),
    .B(state[1]),
    .Y(_007_)
  );
  NAND _153_ (
    .A(_007_),
    .B(_005_),
    .Y(_008_)
  );
  NAND _154_ (
    .A(_008_),
    .B(_127_),
    .Y(_009_)
  );
  NAND _155_ (
    .A(_009_),
    .B(_126_),
    .Y(_108_)
  );
  NAND _156_ (
    .A(_000_),
    .B(newService),
    .Y(_010_)
  );
  NAND _157_ (
    .A(_001_),
    .B(multiblock),
    .Y(_011_)
  );
  NOR _158_ (
    .A(_011_),
    .B(_119_),
    .Y(_012_)
  );
  NAND _159_ (
    .A(state[4]),
    .B(_122_),
    .Y(_013_)
  );
  NOR _160_ (
    .A(_013_),
    .B(fifo_full),
    .Y(_015_)
  );
  NOR _161_ (
    .A(_015_),
    .B(_012_),
    .Y(_016_)
  );
  NAND _162_ (
    .A(_016_),
    .B(_010_),
    .Y(_109_)
  );
  NOT _163_ (
    .A(recibido),
    .Y(_017_)
  );
  NAND _164_ (
    .A(_002_),
    .B(_017_),
    .Y(_018_)
  );
  NOT _165_ (
    .A(_013_),
    .Y(_019_)
  );
  NAND _166_ (
    .A(_019_),
    .B(fifo_full),
    .Y(_020_)
  );
  NAND _167_ (
    .A(_020_),
    .B(_018_),
    .Y(_110_)
  );
  NOT _168_ (
    .A(state[4]),
    .Y(_021_)
  );
  NAND _169_ (
    .A(_116_),
    .B(_120_),
    .Y(_022_)
  );
  NOR _170_ (
    .A(_022_),
    .B(state[2]),
    .Y(_023_)
  );
  NAND _171_ (
    .A(_023_),
    .B(_021_),
    .Y(_024_)
  );
  NAND _172_ (
    .A(_024_),
    .B(writeRead),
    .Y(_025_)
  );
  NOR _173_ (
    .A(_025_),
    .B(reset),
    .Y(_004_)
  );
  NOT _174_ (
    .A(timeout_fisica[0]),
    .Y(_026_)
  );
  NOR _175_ (
    .A(_023_),
    .B(_026_),
    .Y(_027_)
  );
  NOT _176_ (
    .A(timeout[0]),
    .Y(_028_)
  );
  NAND _177_ (
    .A(timeoutenable),
    .B(state[4]),
    .Y(_029_)
  );
  NOR _178_ (
    .A(_029_),
    .B(_028_),
    .Y(_030_)
  );
  NOR _179_ (
    .A(_030_),
    .B(_027_),
    .Y(_031_)
  );
  NOR _180_ (
    .A(_031_),
    .B(reset),
    .Y(_003_[0])
  );
  NOT _181_ (
    .A(timeout_fisica[1]),
    .Y(_032_)
  );
  NOR _182_ (
    .A(_023_),
    .B(_032_),
    .Y(_033_)
  );
  NOT _183_ (
    .A(timeout[1]),
    .Y(_034_)
  );
  NOR _184_ (
    .A(_029_),
    .B(_034_),
    .Y(_035_)
  );
  NOR _185_ (
    .A(_035_),
    .B(_033_),
    .Y(_036_)
  );
  NOR _186_ (
    .A(_036_),
    .B(reset),
    .Y(_003_[1])
  );
  NOT _187_ (
    .A(timeout_fisica[2]),
    .Y(_037_)
  );
  NOR _188_ (
    .A(_023_),
    .B(_037_),
    .Y(_038_)
  );
  NOT _189_ (
    .A(timeout[2]),
    .Y(_039_)
  );
  NOR _190_ (
    .A(_029_),
    .B(_039_),
    .Y(_040_)
  );
  NOR _191_ (
    .A(_040_),
    .B(_038_),
    .Y(_041_)
  );
  NOR _192_ (
    .A(_041_),
    .B(reset),
    .Y(_003_[2])
  );
  NOT _193_ (
    .A(timeout_fisica[3]),
    .Y(_042_)
  );
  NOR _194_ (
    .A(_023_),
    .B(_042_),
    .Y(_043_)
  );
  NOT _195_ (
    .A(timeout[3]),
    .Y(_044_)
  );
  NOR _196_ (
    .A(_029_),
    .B(_044_),
    .Y(_045_)
  );
  NOR _197_ (
    .A(_045_),
    .B(_043_),
    .Y(_046_)
  );
  NOR _198_ (
    .A(_046_),
    .B(reset),
    .Y(_003_[3])
  );
  NOT _199_ (
    .A(timeout_fisica[4]),
    .Y(_047_)
  );
  NOR _200_ (
    .A(_023_),
    .B(_047_),
    .Y(_048_)
  );
  NOT _201_ (
    .A(timeout[4]),
    .Y(_049_)
  );
  NOR _202_ (
    .A(_029_),
    .B(_049_),
    .Y(_050_)
  );
  NOR _203_ (
    .A(_050_),
    .B(_048_),
    .Y(_051_)
  );
  NOR _204_ (
    .A(_051_),
    .B(reset),
    .Y(_003_[4])
  );
  NOT _205_ (
    .A(timeout_fisica[5]),
    .Y(_052_)
  );
  NOR _206_ (
    .A(_023_),
    .B(_052_),
    .Y(_053_)
  );
  NOT _207_ (
    .A(timeout[5]),
    .Y(_054_)
  );
  NOR _208_ (
    .A(_029_),
    .B(_054_),
    .Y(_055_)
  );
  NOR _209_ (
    .A(_055_),
    .B(_053_),
    .Y(_056_)
  );
  NOR _210_ (
    .A(_056_),
    .B(reset),
    .Y(_003_[5])
  );
  NOT _211_ (
    .A(timeout_fisica[6]),
    .Y(_057_)
  );
  NOR _212_ (
    .A(_023_),
    .B(_057_),
    .Y(_058_)
  );
  NOT _213_ (
    .A(timeout[6]),
    .Y(_059_)
  );
  NOR _214_ (
    .A(_029_),
    .B(_059_),
    .Y(_060_)
  );
  NOR _215_ (
    .A(_060_),
    .B(_058_),
    .Y(_061_)
  );
  NOR _216_ (
    .A(_061_),
    .B(reset),
    .Y(_003_[6])
  );
  NOT _217_ (
    .A(timeout_fisica[7]),
    .Y(_062_)
  );
  NOR _218_ (
    .A(_023_),
    .B(_062_),
    .Y(_063_)
  );
  NOT _219_ (
    .A(timeout[7]),
    .Y(_064_)
  );
  NOR _220_ (
    .A(_029_),
    .B(_064_),
    .Y(_065_)
  );
  NOR _221_ (
    .A(_065_),
    .B(_063_),
    .Y(_066_)
  );
  NOR _222_ (
    .A(_066_),
    .B(reset),
    .Y(_003_[7])
  );
  NOT _223_ (
    .A(timeout_fisica[8]),
    .Y(_067_)
  );
  NOR _224_ (
    .A(_023_),
    .B(_067_),
    .Y(_068_)
  );
  NOT _225_ (
    .A(timeout[8]),
    .Y(_069_)
  );
  NOR _226_ (
    .A(_029_),
    .B(_069_),
    .Y(_070_)
  );
  NOR _227_ (
    .A(_070_),
    .B(_068_),
    .Y(_071_)
  );
  NOR _228_ (
    .A(_071_),
    .B(reset),
    .Y(_003_[8])
  );
  NOT _229_ (
    .A(timeout_fisica[9]),
    .Y(_072_)
  );
  NOR _230_ (
    .A(_023_),
    .B(_072_),
    .Y(_073_)
  );
  NOT _231_ (
    .A(timeout[9]),
    .Y(_074_)
  );
  NOR _232_ (
    .A(_029_),
    .B(_074_),
    .Y(_075_)
  );
  NOR _233_ (
    .A(_075_),
    .B(_073_),
    .Y(_076_)
  );
  NOR _234_ (
    .A(_076_),
    .B(reset),
    .Y(_003_[9])
  );
  NOT _235_ (
    .A(timeout_fisica[10]),
    .Y(_077_)
  );
  NOR _236_ (
    .A(_023_),
    .B(_077_),
    .Y(_078_)
  );
  NOT _237_ (
    .A(timeout[10]),
    .Y(_079_)
  );
  NOR _238_ (
    .A(_029_),
    .B(_079_),
    .Y(_080_)
  );
  NOR _239_ (
    .A(_080_),
    .B(_078_),
    .Y(_081_)
  );
  NOR _240_ (
    .A(_081_),
    .B(reset),
    .Y(_003_[10])
  );
  NOT _241_ (
    .A(timeout_fisica[11]),
    .Y(_082_)
  );
  NOR _242_ (
    .A(_023_),
    .B(_082_),
    .Y(_083_)
  );
  NOT _243_ (
    .A(timeout[11]),
    .Y(_084_)
  );
  NOR _244_ (
    .A(_029_),
    .B(_084_),
    .Y(_085_)
  );
  NOR _245_ (
    .A(_085_),
    .B(_083_),
    .Y(_086_)
  );
  NOR _246_ (
    .A(_086_),
    .B(reset),
    .Y(_003_[11])
  );
  NOT _247_ (
    .A(timeout_fisica[12]),
    .Y(_087_)
  );
  NOR _248_ (
    .A(_023_),
    .B(_087_),
    .Y(_088_)
  );
  NOT _249_ (
    .A(timeout[12]),
    .Y(_089_)
  );
  NOR _250_ (
    .A(_029_),
    .B(_089_),
    .Y(_090_)
  );
  NOR _251_ (
    .A(_090_),
    .B(_088_),
    .Y(_091_)
  );
  NOR _252_ (
    .A(_091_),
    .B(reset),
    .Y(_003_[12])
  );
  NOT _253_ (
    .A(timeout_fisica[13]),
    .Y(_092_)
  );
  NOR _254_ (
    .A(_023_),
    .B(_092_),
    .Y(_093_)
  );
  NOT _255_ (
    .A(timeout[13]),
    .Y(_094_)
  );
  NOR _256_ (
    .A(_029_),
    .B(_094_),
    .Y(_095_)
  );
  NOR _257_ (
    .A(_095_),
    .B(_093_),
    .Y(_096_)
  );
  NOR _258_ (
    .A(_096_),
    .B(reset),
    .Y(_003_[13])
  );
  NOT _259_ (
    .A(timeout_fisica[14]),
    .Y(_097_)
  );
  NOR _260_ (
    .A(_023_),
    .B(_097_),
    .Y(_099_)
  );
  NOT _261_ (
    .A(timeout[14]),
    .Y(_100_)
  );
  NOR _262_ (
    .A(_029_),
    .B(_100_),
    .Y(_101_)
  );
  NOR _263_ (
    .A(_101_),
    .B(_099_),
    .Y(_102_)
  );
  NOR _264_ (
    .A(_102_),
    .B(reset),
    .Y(_003_[14])
  );
  NOT _265_ (
    .A(timeout_fisica[15]),
    .Y(_103_)
  );
  NOR _266_ (
    .A(_023_),
    .B(_103_),
    .Y(_104_)
  );
  NOT _267_ (
    .A(timeout[15]),
    .Y(_105_)
  );
  NOR _268_ (
    .A(_029_),
    .B(_105_),
    .Y(_106_)
  );
  NOR _269_ (
    .A(_106_),
    .B(_104_),
    .Y(_107_)
  );
  NOR _270_ (
    .A(_107_),
    .B(reset),
    .Y(_003_[15])
  );
  DFF _271_ (
    .C(clock),
    .D(_098_),
    .Q(state[0])
  );
  DFF _272_ (
    .C(clock),
    .D(_014_),
    .Q(state[1])
  );
  DFF _273_ (
    .C(clock),
    .D(_111_),
    .Q(state[2])
  );
  DFF _274_ (
    .C(clock),
    .D(_110_),
    .Q(state[3])
  );
  DFF _275_ (
    .C(clock),
    .D(_109_),
    .Q(state[4])
  );
  DFF _276_ (
    .C(clock),
    .D(_108_),
    .Q(state[5])
  );
  DFF _277_ (
    .C(clock),
    .D(_001_),
    .Q(complete)
  );
  DFF _278_ (
    .C(clock),
    .D(_002_),
    .Q(newService_fisica)
  );
  DFF _279_ (
    .C(clock),
    .D(_003_[0]),
    .Q(timeout_fisica[0])
  );
  DFF _280_ (
    .C(clock),
    .D(_003_[1]),
    .Q(timeout_fisica[1])
  );
  DFF _281_ (
    .C(clock),
    .D(_003_[2]),
    .Q(timeout_fisica[2])
  );
  DFF _282_ (
    .C(clock),
    .D(_003_[3]),
    .Q(timeout_fisica[3])
  );
  DFF _283_ (
    .C(clock),
    .D(_003_[4]),
    .Q(timeout_fisica[4])
  );
  DFF _284_ (
    .C(clock),
    .D(_003_[5]),
    .Q(timeout_fisica[5])
  );
  DFF _285_ (
    .C(clock),
    .D(_003_[6]),
    .Q(timeout_fisica[6])
  );
  DFF _286_ (
    .C(clock),
    .D(_003_[7]),
    .Q(timeout_fisica[7])
  );
  DFF _287_ (
    .C(clock),
    .D(_003_[8]),
    .Q(timeout_fisica[8])
  );
  DFF _288_ (
    .C(clock),
    .D(_003_[9]),
    .Q(timeout_fisica[9])
  );
  DFF _289_ (
    .C(clock),
    .D(_003_[10]),
    .Q(timeout_fisica[10])
  );
  DFF _290_ (
    .C(clock),
    .D(_003_[11]),
    .Q(timeout_fisica[11])
  );
  DFF _291_ (
    .C(clock),
    .D(_003_[12]),
    .Q(timeout_fisica[12])
  );
  DFF _292_ (
    .C(clock),
    .D(_003_[13]),
    .Q(timeout_fisica[13])
  );
  DFF _293_ (
    .C(clock),
    .D(_003_[14]),
    .Q(timeout_fisica[14])
  );
  DFF _294_ (
    .C(clock),
    .D(_003_[15]),
    .Q(timeout_fisica[15])
  );
  DFF _295_ (
    .C(clock),
    .D(_004_),
    .Q(writeRead_fisica)
  );
  DFF _296_ (
    .C(clock),
    .D(reset),
    .Q(reset_fisica)
  );
  DFF _297_ (
    .C(clock),
    .D(_000_),
    .Q(IDLE_out)
  );
endmodule

(* src = "deserializer.v:1" *)
module deserializer(clk, enable, reset, framesize, in, out, complete);
  (* src = "deserializer.v:14" *)
  input clk;
  (* src = "deserializer.v:17" *)
  output complete;
  (* src = "deserializer.v:14" *)
  input enable;
  (* src = "deserializer.v:15" *)
  input [7:0] framesize;
  (* src = "deserializer.v:14" *)
  input in;
  (* src = "deserializer.v:18" *)
  output [31:0] out;
  (* src = "deserializer.v:14" *)
  input reset;
  assign complete = 1'b0;
  assign out = 32'd0;
endmodule

(* src = "serializer.v:1" *)
module serializer(clk, reset, enable, in, complete, out);
  (* src = "serializer.v:26" *)
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  (* src = "serializer.v:13" *)
  input clk;
  (* src = "serializer.v:16" *)
  output complete;
  (* src = "serializer.v:13" *)
  input enable;
  (* src = "serializer.v:14" *)
  input [31:0] in;
  (* src = "serializer.v:17" *)
  output out;
  (* src = "serializer.v:13" *)
  input reset;
  NAND _4_ (
    .A(enable),
    .B(in[0]),
    .Y(_1_)
  );
  NOT _5_ (
    .A(enable),
    .Y(_2_)
  );
  NAND _6_ (
    .A(_2_),
    .B(out),
    .Y(_3_)
  );
  NAND _7_ (
    .A(_3_),
    .B(_1_),
    .Y(_0_)
  );
  DFF _8_ (
    .C(clk),
    .D(_0_),
    .Q(out)
  );
  assign complete = 1'b0;
endmodule
